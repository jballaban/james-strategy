{"version":3,"file":"james-strategy.js","mappings":";;;;;;;;;;;;;;;AAA8C;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,SAAS;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA,iBAAiB,0DAAc;AAC/B;AACA;AACA;AACA;AACA;AACA,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,0BAA0B;AACvC,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,oCAAoC;AAC9D,0BAA0B,oCAAoC;AAC9D,0BAA0B,kCAAkC;AAC5D;AACA,MAAM;AACN;AACA;AACA;AACA;AACA,8EAA8E;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,0DAAc;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,mCAAmC,0DAAc;AACjD;AACA,WAAW,0DAAc;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,qCAAqC,0DAAc;AACnD;AACA,WAAW,0DAAc;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,oCAAoC,iBAAiB;AACrD;AACA;AACA;AACA;AACA,aAAa,oBAAoB,OAAO,QAAQ,iCAAiC,SAAS,KAAK,MAAM,oBAAoB;AACzH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,YAAY;AACzB,YAAY;AACZ;AACA,cAAc,SAAS;AACvB;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA,0CAA0C,YAAY;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,YAAY;AACzB,aAAa,QAAQ;AACrB;AACA,cAAc,cAAc;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,YAAY;AACzB,aAAa,QAAQ;AACrB;AACA,cAAc,eAAe;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,YAAY;AAClE,eAAe,4BAA4B;AAC3C;AACA,eAAe,8BAA8B;AAC7C;AACA;AACA;AACA;AACA,+CAA+C,OAAO;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,gBAAgB;AAC7B,aAAa,eAAe;AAC5B,aAAa,GAAG;AAChB;AACA,cAAc,mBAAmB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,UAAU;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,UAAU;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACgB;;;;;;;;;;;;;;;;;ACzcc;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,aAAa,yBAAyB;AACtC,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,0CAAM;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,QAAQ,kBAAkB;AACvC,aAAa,QAAQ,iBAAiB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA,cAAc,0BAA0B;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACsB;;;;;;;;;;;;;;;;;;AChFQ;AACkB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,4DAAY;AACnC;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,YAAY;AACzB,aAAa,iBAAiB,WAAW;AACzC,cAAc,OAAO;AACrB;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA,2BAA2B,0CAAM;AACjC;AACA;AACA;AACA;AACA;AACA,8BAA8B,aAAa,GAAG,OAAO;AACrD;AACA;AACA,kCAAkC,0BAA0B,GAAG,OAAO;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACkB;;;;;;;;;;;;;;;;;AC9F8B;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,4DAAY;AACpC;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,aAAa,YAAY;AACzB,aAAa,kBAAkB,WAAW;AAC1C,cAAc,OAAO;AACrB;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACmB;;;;;;;;;;;;;;;;;ACnD6B;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,4DAAY;AAC5C;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,YAAY;AACzB,aAAa,0BAA0B,WAAW;AAClD,cAAc,OAAO;AACrB;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC2B;;;;;;;;;;;;;;;;ACtC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,UAAU;AACtB;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,cAAc;AAC3B,aAAa,kBAAkB;AAC/B;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA,eAAe,UAAU;AACzB;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf,sBAAsB;AACtB,aAAa;AACb,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf,sBAAsB;AACtB,aAAa;AACb,WAAW;AACX;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACmB;;;;;;;;;;;ACpGnB;AACA;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB;AACA;AACA;AACA,aAAa,QAAQ;AACrB,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB,cAAc,SAAS;AACvB,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA,aAAa,0BAA0B;AACvC,cAAc,SAAS;AACvB,cAAc,SAAS;AACvB,cAAc,SAAS;AACvB,eAAe,0CAA0C;AACzD;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,eAAe,oBAAoB;AACnC,cAAc,gBAAgB;AAC9B,cAAc,iBAAiB;AAC/B,eAAe,6BAA6B;AAC5C;AACA;AACA;AACA;AACA,aAAa,0BAA0B;AACvC,cAAc,SAAS;AACvB,cAAc,SAAS;AACvB,cAAc,SAAS;AACvB;AACA;AACA;AACA;AACA,aAAa,0BAA0B;AACvC,cAAc,SAAS;AACvB,cAAc,SAAS;AACvB,cAAc,SAAS;AACvB;AACA;AACA;AACA;AACA,aAAa,0BAA0B;AACvC;AACA;AACA;AACA;AACA,aAAa,0BAA0B;AACvC,eAAe,8BAA8B;AAC7C;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,cAAc,UAAU;AACxB;AACA;AACA;AACA;AACA,aAAa,0BAA0B;AACvC,cAAc,qCAAqC;AACnD,cAAc,SAAS;AACvB;AACA;AACA;AACA;AACA,aAAa,iBAAiB;AAC9B;AACA;AACA;AACA;AACA,aAAa,0BAA0B;AACvC,cAAc,QAAQ;AACtB,cAAc,+DAA+D;AAC7E;AACA,cAAc,+DAA+D;AAC7E;AACA,cAAc,sCAAsC;AACpD;AACA;AACA;AACA;AACA,aAAa,0BAA0B;AACvC,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB,cAAc,eAAe;AAC7B;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,cAAc,YAAY;AAC1B,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA,aAAa,0BAA0B;AACvC,cAAc,SAAS;AACvB,cAAc,UAAU;AACxB;AACA;AACA,cAAc,SAAS;AACvB,cAAc,UAAU;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,0BAA0B;AACvC,cAAc,QAAQ;AACtB,cAAc,SAAS;AACvB,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA,aAAa,0BAA0B;AACvC,cAAc,QAAQ;AACtB;AACA;AACA;;;;;;;;;;;AC7IA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;;;;;;;;;;;;;;;;AC5E8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC,SAAS,0CAAM;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,0CAAM;AACrB;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACmB;;;;;;;;;;;;;;;;;AClCW;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC,SAAS,0CAAM;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,0CAAM;AACrB;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACiB;;;;;;;;;;;;;;;;;AClCa;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC,SAAS,0CAAM;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,0CAAM;AACrB;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACmB;;;;;;;;;;;AClCnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;;;;;;;;;;;;;;;AC1CO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;;;;;;;;;;;;;;;AC/B8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,0CAAM;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,QAAQ,kBAAkB;AACvC,aAAa,QAAQ,iBAAiB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,oBAAoB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,eAAe,kBAAkB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACsB;;;;;;;;;;;;;;;;;;;AC5EQ;AACkB;AACN;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,4DAAY;AACnC;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,aAAa,WAAW;AACrC;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,SAAS;AACvB;AACA;AACA;AACA,6BAA6B,0CAAM;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,0CAAM;AAC9B;AACA;AACA;AACA;AACA,4BAA4B,6DAAO,GAAO,EAAE,UAAU,CAAC,CAAC;AACxD;AACA,4BAA4B,0CAAM;AAClC;AACA;AACA,kCAAkC,sDAAS;AAC3C;AACA,gBAAgB,0CAAM;AACtB;AACA;AACA;AACA;AACA,mCAAmC,0CAAM;AACzC;AACA;AACA;AACA;AACA;AACA,oCAAoC,0CAAM;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,0CAAM;AACtC;AACA;AACA,mDAAmD,0CAAM;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,wBAAwB;AACtD;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,0BAA0B,0CAAM;AAChC;AACA;AACA;AACA,0BAA0B,0CAAM;AAChC;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,0CAAM;AAC1C;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,uJAAiC;AACtE;AACA;AACA,kBAAkB,sDAAS,SAAS,0CAAM;AAC1C;AACA;AACA;AACA,gCAAgC,0CAAM;AACtC,iDAAiD,0CAAM;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,UAAU;AACV,wBAAwB,0CAAM;AAC9B;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACkB;;;;;;;;;;;;;;;;;;AC1NY;AACkB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,4DAAY;AACrC;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,aAAa,WAAW;AACrC;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,oBAAoB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,qCAAqC,EAAE,sBAAsB;AACjF,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,wBAAwB,qCAAqC;AAC7D;AACA,yCAAyC,aAAa;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACoB;;;;;;;;;;;;;;;;;;AC3EU;AACkB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,4DAAY;AACnC;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,aAAa,WAAW;AACrC;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,SAAS;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,0CAAM;AAClC;AACA;AACA;AACA,qBAAqB,4BAA4B,qBAAqB,gBAAgB,MAAM,GAAG,uBAAuB,kBAAkB,MAAM,GAAG,sBAAsB,gBAAgB,MAAM,GAAG,UAAU,SAAS,MAAM,GAAG,UAAU;AACtO;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA,WAAW;AACX;AACA;AACA,WAAW;AACX,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,WAAW;AACX;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,UAAU;AACxB;AACA;AACA;AACA,wBAAwB,0CAAM;AAC9B;AACA;AACA;AACA;AACA,0BAA0B,0CAAM;AAChC;AACA;AACA;AACA;AACA;AACA,2BAA2B,SAAS;AACpC,0BAA0B,0CAAM;AAChC;AACA,6BAA6B,6DAAQ,GAAO,EAAE,UAAU,CAAC,CAAE;AAC3D;AACA;AACA,UAAU;AACV,wBAAwB,0CAAM,qDAAqD,UAAU;AAC7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,UAAU;AACxB;AACA;AACA;AACA;AACA,IAAI,qIAAwB;AAC5B;AACA;AACA,yBAAyB,0CAAM;AAC/B,aAAa,0CAAM;AACnB;AACA,4CAA4C,0CAAM;AAClD;AACA;AACA;AACA;AACA,sBAAsB,sBAAsB;AAC5C;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACkB;;;;;;;;;;;;;AC/JlB;AACA;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB,cAAc,SAAS;AACvB;AACA;AACA;AACA;AACA;AACA,aAAa,0BAA0B;AACvC,cAAc,kBAAkB;AAChC;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,cAAc,QAAQ;AACtB,cAAc,QAAQ;AACtB,cAAc,SAAS;AACvB;AACA;AACA;AACU;;;;;;;;;;;ACrCV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;;;;;;UC1DA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA,sDAAsD;WACtD,sCAAsC,iEAAiE;WACvG;WACA;WACA;WACA;WACA;WACA;;;;;WCzBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;WACA;WACA;WACA;;;;;WCHA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;ACN8B;AAC9B;AACA;AACA;AACA;AACA,UAAU,0CAAM;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,0CAAM;AAC7B;AACA,yBAAyB,0CAAM;AAC/B,+BAA+B,6DAAO,GAAO,EAAE,SAAS,CAAC,CAAC;AAC1D,wDAAwD,0CAAM;AAC9D;AACA;AACA;AACA,QAAQ;AACR,sBAAsB,0CAAM,sBAAsB,OAAO;AACzD;AACA;AACA;AACA,mCAAmC,qIAAwB;AAC3D;AACA;AACA,qBAAqB,0CAAM;AAC3B;AACA;AACA;AACA;AACA,WAAW;AACX;AACA,+BAA+B,0CAAM;AACrC;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,qCAAqC,yIAA0B;AAC/D;AACA;AACA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mE","sources":["webpack://james-strategy/./src/Helper.js","webpack://james-strategy/./src/cards/AbstractCard.js","webpack://james-strategy/./src/cards/AreaCard.js","webpack://james-strategy/./src/cards/LightCard.js","webpack://james-strategy/./src/cards/MiscellaneousCard.js","webpack://james-strategy/./src/cards/TitleCard.js","webpack://james-strategy/./src/cards/typedefs.js","webpack://james-strategy/./src/cards/ lazy ^\\.\\/.*$ namespace object","webpack://james-strategy/./src/chips/CoverChip.js","webpack://james-strategy/./src/chips/FanChip.js","webpack://james-strategy/./src/chips/LightChip.js","webpack://james-strategy/./src/chips/ lazy ^\\.\\/.*$ namespace object","webpack://james-strategy/./src/optionDefaults.js","webpack://james-strategy/./src/views/AbstractView.js","webpack://james-strategy/./src/views/AreaView.js","webpack://james-strategy/./src/views/DomainView.js","webpack://james-strategy/./src/views/HomeView.js","webpack://james-strategy/./src/views/typedefs.js","webpack://james-strategy/./src/views/ lazy ^\\.\\/.*$ namespace object","webpack://james-strategy/webpack/bootstrap","webpack://james-strategy/webpack/runtime/create fake namespace object","webpack://james-strategy/webpack/runtime/define property getters","webpack://james-strategy/webpack/runtime/ensure chunk","webpack://james-strategy/webpack/runtime/hasOwnProperty shorthand","webpack://james-strategy/webpack/runtime/make namespace object","webpack://james-strategy/./src/james-strategy.js"],"sourcesContent":["import {optionDefaults} from \"optionDefaults\";\r\n\r\n/**\r\n * Helper Class\r\n *\r\n * Contains the objects of Home Assistant's registries and helper methods.\r\n */\r\nclass Helper {\r\n  /**\r\n   * An array of entities from Home Assistant's entity registry.\r\n   *\r\n   * @type {hassEntity[]}\r\n   * @private\r\n   */\r\n  static #entities;\r\n  /**\r\n   * An array of entities from Home Assistant's device registry.\r\n   *\r\n   * @type {deviceEntity[]}\r\n   * @private\r\n   */\r\n  static #devices;\r\n  /**\r\n   * An array of entities from Home Assistant's area registry.\r\n   *\r\n   * @type {areaEntity[]}\r\n   * @private\r\n   */\r\n  static #areas = [];\r\n  /**\r\n   * An array of state entities from Home Assistant's Hass object.\r\n   *\r\n   * @type {hassObject[\"states\"]}\r\n   * @private\r\n   */\r\n  static #hassStates;\r\n\r\n  /**\r\n   * Indicates whether this module is initialized.\r\n   *\r\n   * @type {boolean} True if initialized.\r\n   * @private\r\n   */\r\n  static #initialized = false;\r\n\r\n  /**\r\n   * The Custom strategy configuration.\r\n   *\r\n   * @type {customStrategyOptions | {}}\r\n   * @private\r\n   */\r\n  static #strategyOptions = {};\r\n\r\n  /**\r\n   * Set to true for more verbose information in the console.\r\n   *\r\n   * @type {boolean}\r\n   */\r\n  static debug = optionDefaults.debug;\r\n\r\n  /**\r\n   * Class constructor.\r\n   *\r\n   * This class shouldn't be instantiated directly. Instead, it should be initialized with method initialize().\r\n   * @throws {Error} If trying to instantiate this class.\r\n   */\r\n  constructor() {\r\n    throw new Error(\"This class should be invoked with method initialize() instead of using the keyword new!\");\r\n  }\r\n\r\n  /**\r\n   * Custom strategy configuration.\r\n   *\r\n   * @returns {customStrategyOptions|{}}\r\n   * @static\r\n   */\r\n  static get strategyOptions() {\r\n    return this.#strategyOptions;\r\n  }\r\n\r\n  /**\r\n   * @returns {areaEntity[]}\r\n   * @static\r\n   */\r\n  static get areas() {\r\n    return this.#areas;\r\n  }\r\n\r\n  /**\r\n   * @returns {deviceEntity[]}\r\n   * @static\r\n   */\r\n  static get devices() {\r\n    return this.#devices;\r\n  }\r\n\r\n  /**\r\n   * @returns {hassEntity[]}\r\n   * @static\r\n   */\r\n  static get entities() {\r\n    return this.#entities;\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean}\r\n   * @static\r\n   */\r\n  static get debug() {\r\n    return this.debug;\r\n  }\r\n\r\n  /**\r\n   * Initialize this module.\r\n   *\r\n   * @param {dashBoardInfo | viewInfo} info Strategy information object.\r\n   * @returns {Promise<void>}\r\n   * @static\r\n   */\r\n  static async initialize(info) {\r\n    this.#hassStates = info.hass.states;\r\n\r\n    try {\r\n      // Query the registries of Home Assistant.\r\n      [this.#entities, this.#devices, this.#areas] = await Promise.all([\r\n        info.hass.callWS({type: \"config/entity_registry/list\"}),\r\n        info.hass.callWS({type: \"config/device_registry/list\"}),\r\n        info.hass.callWS({type: \"config/area_registry/list\"}),\r\n      ]);\r\n    } catch (e) {\r\n      console.error(Helper.debug ? e : \"An error occurred while querying Home assistant's registries!\");\r\n    }\r\n\r\n    // Cloning is required for the purpose of the required undisclosed area.\r\n    this.#strategyOptions = structuredClone(info.config.strategy.options || {});\r\n    this.debug            = this.#strategyOptions.debug;\r\n\r\n    // Setup required configuration entries.\r\n    // TODO: Refactor to something smarter than repeating code for areas, views and domains.\r\n    this.#strategyOptions.areas   = this.#strategyOptions.areas ?? {};\r\n    this.#strategyOptions.views   = this.#strategyOptions.views ?? {};\r\n    this.#strategyOptions.domains = this.#strategyOptions.domains ?? {};\r\n\r\n    // Setup and add the undisclosed area if not hidden in the strategy options.\r\n    if (!this.#strategyOptions.areas.undisclosed?.hidden) {\r\n      this.#strategyOptions.areas.undisclosed = {\r\n        ...optionDefaults.areas.undisclosed,\r\n        ...this.#strategyOptions.areas.undisclosed,\r\n      };\r\n\r\n      // Make sure the area_id of the custom undisclosed area remains null.\r\n      this.#strategyOptions.areas.undisclosed.area_id = null;\r\n\r\n      this.#areas.push(this.#strategyOptions.areas.undisclosed);\r\n    }\r\n\r\n    // Merge custom areas of the strategy options into hass areas.\r\n    this.#areas = Helper.areas.map(area => {\r\n      return {...area, ...this.#strategyOptions.areas[area.area_id ?? \"undisclosed\"]};\r\n    });\r\n\r\n    // Sort hass areas by order first and then by name.\r\n    this.#areas.sort((a, b) => {\r\n      return (a.order ?? Infinity) - (b.order ?? Infinity) || a.name.localeCompare(b.name);\r\n    });\r\n\r\n    // Merge the views of the strategy options and the default views.\r\n    for (const view of Object.keys(optionDefaults.views)) {\r\n      this.#strategyOptions.views[view] = {\r\n        ...optionDefaults.views[view],\r\n        ...(this.#strategyOptions.views[view]),\r\n      };\r\n    }\r\n\r\n    // Sort views of the strategy options by order first and then by title.\r\n    this.#strategyOptions.views = Object.fromEntries(\r\n        Object.entries(this.#strategyOptions.views).sort(([, a], [, b]) => {\r\n          return (a.order ?? Infinity) - (b.order ?? Infinity) || a.title?.localeCompare(b.title);\r\n        }),\r\n    );\r\n\r\n    // Merge the domains of the strategy options and the default domains.\r\n    for (const domain of Object.keys(optionDefaults.domains)) {\r\n      this.#strategyOptions.domains[domain] = {\r\n        ...optionDefaults.domains[domain],\r\n        ...(this.#strategyOptions.domains[domain]),\r\n      };\r\n    }\r\n\r\n    // Sort domains of the strategy options by order first and then by title.\r\n    this.#strategyOptions.domains = Object.fromEntries(\r\n        Object.entries(this.#strategyOptions.domains).sort(([, a], [, b]) => {\r\n          return (a.order ?? Infinity) - (b.order ?? Infinity) || a.title?.localeCompare(b.title);\r\n        }),\r\n    );\r\n\r\n    this.#initialized = true;\r\n  }\r\n\r\n  /**\r\n   * Get the initialization status of the Helper class.\r\n   *\r\n   * @returns {boolean} True if this module is initialized.\r\n   * @static\r\n   */\r\n  static isInitialized() {\r\n    return this.#initialized;\r\n  }\r\n\r\n  /**\r\n   * Get a template string to define the number of a given domain's entities with a certain state.\r\n   *\r\n   * States are compared against a given value by a given operator.\r\n   *\r\n   * @param {string} domain The domain of the entities.\r\n   * @param {string} operator The Comparison operator between state and value.\r\n   * @param {string} value The value to which the state is compared against.\r\n   *\r\n   * @return {string} The template string.\r\n   * @static\r\n   */\r\n  static getCountTemplate(domain, operator, value) {\r\n    // noinspection JSMismatchedCollectionQueryUpdate (False positive per 17-04-2023)\r\n    /**\r\n     * Array of entity state-entries, filtered by domain.\r\n     *\r\n     * Each element contains a template-string which is used to access home assistant's state machine (state object) in\r\n     * a template.\r\n     * E.g. \"states['light.kitchen']\"\r\n     *\r\n     * The array excludes hidden and disabled entities.\r\n     *\r\n     * @type {string[]}\r\n     */\r\n    const states = [];\r\n\r\n    if (!this.isInitialized()) {\r\n      console.warn(\"Helper class should be initialized before calling this method!\");\r\n    }\r\n\r\n    // Get the ID of the devices which are linked to the given area.\r\n    for (const area of this.#areas) {\r\n      const areaDeviceIds = this.#devices.filter(device => {\r\n        return device.area_id === area.area_id;\r\n      }).map(device => {\r\n        return device.id;\r\n      });\r\n\r\n      // Get the entities of which all conditions of the callback function are met. @see areaFilterCallback.\r\n      const newStates = this.#entities.filter(\r\n          this.#areaFilterCallback, {\r\n            area: area,\r\n            domain: domain,\r\n            areaDeviceIds: areaDeviceIds,\r\n          })\r\n          .map(entity => `states['${entity.entity_id}']`);\r\n\r\n      states.push(...newStates);\r\n    }\r\n\r\n    return `{% set entities = [${states}] %} {{ entities | selectattr('state','${operator}','${value}') | list | count }}`;\r\n  }\r\n\r\n  /**\r\n   * Callback function for filtering entities.\r\n   *\r\n   * Entities of which all the conditions below are met are kept:\r\n   * 1. Or/Neither the entity's linked device (if any) or/nor the entity itself is lined to the given area.\r\n   *    (See variable areaMatch)\r\n   * 2. The entity's domain matches the given domain.\r\n   * 3. The entity is not hidden and is not disabled.\r\n   *\r\n   * @param {hassEntity} entity The current hass entity to evaluate.\r\n   * @this {areaFilterContext}\r\n   *\r\n   * @return {boolean} True to keep the entity.\r\n   * @static\r\n   */\r\n  static #areaFilterCallback(entity) {\r\n    const areaMatch = this.area.area_id\r\n        // Area is a hass entity; The entity's linked device or the entity itself is linked to the given area.\r\n        ? this.areaDeviceIds.includes(entity.device_id) || entity.area_id === this.area.area_id\r\n        // Undisclosed area; Neither the entity's linked device (if any), nor the entity itself is linked to any area.\r\n        : (this.areaDeviceIds.includes(entity.device_id) || !entity.device_id) && !entity.area_id;\r\n\r\n    return (\r\n        areaMatch\r\n        && entity.entity_id.startsWith(`${this.domain}.`)\r\n        && entity.hidden_by == null && entity.disabled_by == null\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get device entities from the entity registry, filtered by area and domain.\r\n   *\r\n   * The entity registry is a registry where Home-Assistant keeps track of all entities.\r\n   * A device is represented in Home Assistant via one or more entities.\r\n   *\r\n   * The result excludes hidden and disabled entities.\r\n   *\r\n   * @param {areaEntity} area Area entity.\r\n   * @param {string} domain The domain of the entity-id.\r\n   *\r\n   * @return {hassEntity[]} Array of device entities.\r\n   * @static\r\n   */\r\n  static getDeviceEntities(area, domain) {\r\n    if (!this.isInitialized()) {\r\n      console.warn(\"Helper class should be initialized before calling this method!\");\r\n    }\r\n\r\n    // Get the ID of the devices which are linked to the given area.\r\n    const areaDeviceIds = this.#devices.filter(device => {\r\n      return device.area_id === area.area_id;\r\n    }).map(device => {\r\n\r\n      return device.id;\r\n    });\r\n\r\n    // Return the entities of which all conditions of the callback function are met. @see areaFilterCallback.\r\n    return this.#entities.filter(\r\n        this.#areaFilterCallback, {\r\n          area: area,\r\n          domain: domain,\r\n          areaDeviceIds: areaDeviceIds,\r\n        })\r\n        .sort((a, b) => {\r\n          /** @type hassEntity */\r\n          return a.original_name?.localeCompare(b.original_name);\r\n        });\r\n  }\r\n\r\n  /**\r\n   * Get state entities, filtered by area and domain.\r\n   *\r\n   * The result excludes hidden and disabled entities.\r\n   *\r\n   * @param {areaEntity} area Area entity.\r\n   * @param {string} domain Domain of the entity-id.\r\n   *\r\n   * @return {stateObject[]} Array of state entities.\r\n   */\r\n  static getStateEntities(area, domain) {\r\n    if (!this.isInitialized()) {\r\n      console.warn(\"Helper class should be initialized before calling this method!\");\r\n    }\r\n\r\n    const states = [];\r\n\r\n    // Create a map for the hassEntities and devices {id: object} to improve lookup speed.\r\n    /** @type {Object<string, hassEntity>} */\r\n    const entityMap = Object.fromEntries(this.#entities.map(entity => [entity.entity_id, entity]));\r\n    /** @type {Object<string, deviceEntity>} */\r\n    const deviceMap = Object.fromEntries(this.#devices.map(device => [device.id, device]));\r\n\r\n    // Get states whose entity-id starts with the given string.\r\n    const stateEntities = Object.values(this.#hassStates).filter(\r\n        state => state.entity_id.startsWith(`${domain}.`),\r\n    );\r\n\r\n    for (const state of stateEntities) {\r\n      const hassEntity = entityMap[state.entity_id];\r\n      const device     = deviceMap[hassEntity?.device_id];\r\n\r\n      // Collect states of which any (whichever comes first) of the conditions below are met:\r\n      // 1. The linked entity is linked to the given area.\r\n      // 2. The entity is linked to a device, and the linked device is linked to the given area.\r\n      if (\r\n          !area || (\r\n            (hassEntity?.area_id === area.area_id)\r\n            || (device && device.area_id === area.area_id)\r\n          )\r\n      ) {\r\n        states.push(state);\r\n      }\r\n    }\r\n\r\n    return states;\r\n  }\r\n\r\n  static getState(entity_id) {\r\n    return this.#hassStates[entity_id];\r\n  }\r\n\r\n  /**\r\n   * Sanitize a classname.\r\n   *\r\n   * The name is sanitized by capitalizing the first character of the name or after an underscore.\r\n   * Underscores are removed.\r\n   *\r\n   * @param {string} className Name of the class to sanitize.\r\n   * @returns {string} The sanitized classname.\r\n   */\r\n  static sanitizeClassName(className) {\r\n    className = className.charAt(0).toUpperCase() + className.slice(1);\r\n\r\n    return className.replace(/([-_][a-z])/g, group =>\r\n        group\r\n            .toUpperCase()\r\n            .replace(\"-\", \"\")\r\n            .replace(\"_\", \"\"),\r\n    );\r\n  }\r\n\r\n  static getName(id) {\r\n    return id\r\n      .replace(/(\\_[a-z])/g, group => group.toUpperCase()).replace(/\\_/g,\" \").replace(/^([a-z])/g, group => group.toUpperCase());\r\n  }\r\n\r\n  /**\r\n   * Get the keys of nested objects by its property value.\r\n   *\r\n   * @param {Object<Object>} object An object of objects.\r\n   * @param {string|number} property The name of the property to evaluate.\r\n   * @param {*} value The value which the property should match.\r\n   *\r\n   * @return {string[]|number[]} An array with keys.\r\n   */\r\n  static #getObjectKeysByPropertyValue(object, property, value) {\r\n    const keys = [];\r\n\r\n    for (const key of Object.keys(object)) {\r\n      if (object[key][property] === value) {\r\n        keys.push(key);\r\n      }\r\n    }\r\n\r\n    return keys;\r\n  }\r\n\r\n  /**\r\n   * Get the ids of the views which aren't set to hidden in the strategy options.\r\n   *\r\n   * @return {string[]} An array of view ids.\r\n   */\r\n  static getExposedViewIds() {\r\n    if (!this.isInitialized()) {\r\n      console.warn(\"Helper class should be initialized before calling this method!\");\r\n    }\r\n\r\n    return this.#getObjectKeysByPropertyValue(this.#strategyOptions.views, \"hidden\", false);\r\n  }\r\n\r\n  /**\r\n   * Get the ids of the domain ids which aren't set to hidden in the strategy options.\r\n   *\r\n   * @return {string[]} An array of domain ids.\r\n   */\r\n  static getExposedDomainIds() {\r\n    if (!this.isInitialized()) {\r\n      console.warn(\"Helper class should be initialized before calling this method!\");\r\n    }\r\n\r\n    return this.#getObjectKeysByPropertyValue(this.#strategyOptions.domains, \"hidden\", false);\r\n  }\r\n}\r\n\r\nexport {Helper};\r\n","import {Helper} from \"Helper\";\r\n\r\n/**\r\n * Abstract Card Class\r\n *\r\n * To create a new card, extend the new class with this one.\r\n *\r\n * @class\r\n * @abstract\r\n */\r\nclass AbstractCard {\r\n  /**\r\n   * Entity to create the card for.\r\n   *\r\n   * @type {hassEntity | areaEntity}\r\n   */\r\n  entity;\r\n\r\n  /**\r\n   * Options for creating a card.\r\n   *\r\n   * @type {abstractOptions}\r\n   */\r\n  options = {\r\n    type: \"custom:mushroom-entity-card\",\r\n    icon: \"mdi:help-circle\",\r\n    double_tap_action: {\r\n      action: null,\r\n    },\r\n  };\r\n\r\n  /**\r\n   * Class constructor.\r\n   *\r\n   * @param {hassEntity | areaEntity} entity The hass entity to create a card for.\r\n   * @throws {Error} If the Helper module isn't initialized.\r\n   */\r\n  constructor(entity) {\r\n    if (this.constructor === AbstractCard) {\r\n      throw new Error(\"Abstract classes can't be instantiated.\");\r\n    }\r\n\r\n    if (!Helper.isInitialized()) {\r\n      throw new Error(\"The Helper module must be initialized before using this one.\");\r\n    }\r\n\r\n    this.entity = entity;\r\n  }\r\n\r\n  /**\r\n   * Merge the default options of this class and the custom options into the options of the parent class.\r\n   *\r\n   * @param {Object} [defaultOptions={}] Default options for the card.\r\n   * @param {Object} [customOptions={}] Custom Options for the card.\r\n   */\r\n  mergeOptions(defaultOptions, customOptions) {\r\n    this.options = {\r\n      ...this.options,\r\n      ...defaultOptions,\r\n      ...customOptions,\r\n    };\r\n\r\n    try {\r\n      this.options.double_tap_action.target.entity_id = this.entity.entity_id;\r\n    } catch { }\r\n  }\r\n\r\n  /**\r\n   * Get a card for an entity.\r\n   *\r\n   * @return {abstractOptions & Object} A card object.\r\n   */\r\n  getCard() {\r\n    return {\r\n      entity: this.entity.entity_id,\r\n      ...this.options,\r\n    };\r\n  }\r\n}\r\n\r\nexport {AbstractCard};\r\n","import {Helper} from \"Helper\";\r\nimport {AbstractCard} from \"cards/AbstractCard\";\r\n\r\n/**\r\n * Area Card Class\r\n *\r\n * Used to create a card for an entity of the area domain.\r\n *\r\n * @class\r\n * @extends AbstractCard\r\n */\r\nclass AreaCard extends AbstractCard {\r\n  /**\r\n   * Default options of the card.\r\n   *\r\n   * @type {areaCardOptions}\r\n   * @private\r\n   */\r\n  #defaultOptions = {\r\n    type: \"custom:room-card\",\r\n    title: undefined,\r\n    icon: \"mdi:texture-box\",\r\n    icon_color: \"blue\",\r\n    tap_action: {\r\n      action: \"navigate\",\r\n      navigation_path: undefined,\r\n    },\r\n    hold_action: {\r\n      action: \"none\",\r\n    },\r\n    entities: []\r\n  };\r\n\r\n  #entityOptions = {\r\n    \"show_icon\": true,\r\n    \"show_state\": true,\r\n    \"show_name\": false,\r\n    tap_action: {\r\n      action: \"navigate\",\r\n      navigation_path: undefined,\r\n    },\r\n    \"icon\": {\r\n      \"conditions\": [\r\n        {\r\n          \"condition\": \"above\",\r\n          \"value\": 0,\r\n          \"styles\": {\r\n            \"color\": \"yellow\"\r\n          }\r\n        }\r\n      ]\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Class constructor.\r\n   *\r\n   * @param {areaEntity} area The area entity to create a card for.\r\n   * @param {areaCardOptions} [options={}] Options for the card.\r\n   * @throws {Error} If the Helper module isn't initialized.\r\n   */\r\n  constructor(area, options = {}) {\r\n    super(area);\r\n    this.#defaultOptions.title                      = area.name;\r\n    this.#defaultOptions.tap_action.navigation_path = area.area_id ?? area.name;\r\n\r\n    let exposedDomainIds = Helper.getExposedDomainIds();\r\n\r\n    for (let domain of exposedDomainIds) {\r\n      let entity = {\r\n        ...this.#entityOptions,\r\n        ...{\r\n          \"entity\": `sensor.${area.area_id}_${domain}s_on`,\r\n          \"tap_action\": {\r\n            action: \"navigate\",\r\n            \"navigation_path\": `${area.area_id ?? area.name}_${domain}`\r\n          }\r\n        }\r\n      }\r\n      this.#defaultOptions.entities.push(entity);\r\n    }\r\n\r\n    this.mergeOptions(\r\n        this.#defaultOptions,\r\n        options,\r\n    );\r\n\r\n    // Override the area's name with a custom name, unless a custom primary text is set.\r\n    if (!options.title && options.name) {\r\n      this.options.title = options.name;\r\n    }\r\n  }\r\n}\r\n\r\nexport {AreaCard};\r\n","import {AbstractCard} from \"cards/AbstractCard\";\r\n\r\n/**\r\n * Light Card Class\r\n *\r\n * Used to create a card for controlling an entity of the light domain.\r\n *\r\n * @class\r\n * @extends AbstractCard\r\n */\r\nclass LightCard extends AbstractCard {\r\n  /**\r\n   * Default options of the card.\r\n   *\r\n   * @type {lightCardOptions}\r\n   * @private\r\n   */\r\n  #defaultOptions = {\r\n    type: \"custom:mushroom-light-card\",\r\n    icon: undefined,\r\n    show_brightness_control: true,\r\n    show_color_control: true,\r\n    use_light_color: true,\r\n    double_tap_action: {\r\n      target: {\r\n        entity_id: undefined,\r\n      },\r\n      action: \"call-service\",\r\n      service: \"light.turn_on\",\r\n      data: {\r\n        rgb_color: [255, 255, 255],\r\n      },\r\n    },\r\n  };\r\n\r\n  /**\r\n   * Class constructor.\r\n   *\r\n   * @param {hassEntity} entity The hass entity to create a card for.\r\n   * @param {lightCardOptions} [options={}] Options for the card.\r\n   * @throws {Error} If the Helper module isn't initialized.\r\n   */\r\n  constructor(entity, options = {}) {\r\n    super(entity);\r\n    this.mergeOptions(\r\n        this.#defaultOptions,\r\n        options,\r\n    );\r\n  }\r\n}\r\n\r\nexport {LightCard};\r\n","import {AbstractCard} from \"cards/AbstractCard\";\r\n\r\n/**\r\n * Miscellaneous Card Class\r\n *\r\n * Used to create a card an entity of any domain.\r\n *\r\n * @class\r\n * @extends AbstractCard\r\n */\r\nclass MiscellaneousCard extends AbstractCard {\r\n  /**\r\n   * Default options of the card.\r\n   *\r\n   * @type {miscellaneousCardOptions}\r\n   * @private\r\n   */\r\n  #defaultOptions = {\r\n    type: \"custom:mushroom-entity-card\",\r\n    icon_color: \"blue-grey\",\r\n  };\r\n\r\n  /**\r\n   * Class constructor.\r\n   *\r\n   * @param {hassEntity} entity The hass entity to create a card for.\r\n   * @param {miscellaneousCardOptions} [options={}] Options for the card.\r\n   * @throws {Error} If the Helper module isn't initialized.\r\n   */\r\n  constructor(entity, options = {}) {\r\n    super(entity);\r\n    this.mergeOptions(\r\n        this.#defaultOptions,\r\n        options,\r\n    );\r\n  }\r\n}\r\n\r\nexport {MiscellaneousCard};\r\n","/**\r\n * Title Card class.\r\n *\r\n * Used for creating a Title Card.\r\n *\r\n * @class\r\n */\r\nclass TitleCard {\r\n  /**\r\n   * @type {string[]} An array of area ids.\r\n   * @private\r\n   */\r\n  #areaIds;\r\n\r\n  /**\r\n   * @type {titleCardOptions}\r\n   * @private\r\n   */\r\n  #options = {\r\n    title: undefined,\r\n    subtitle: undefined,\r\n    showControls: true,\r\n    iconOn: \"mdi:power-on\",\r\n    iconOff: \"mdi:power-off\",\r\n    onService: \"none\",\r\n    offService: \"none\",\r\n  };\r\n\r\n  /**\r\n   * Class constructor.\r\n   *\r\n   * @param {areaEntity[]} areas An array of area entities.\r\n   * @param {titleCardOptions} options Title Card options.\r\n   */\r\n  constructor(areas, options = {}) {\r\n    this.#areaIds = areas.map(area => area.area_id).filter(area_id => area_id);\r\n    this.#options = {\r\n      ...this.#options,\r\n      ...options,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Create a Title card.\r\n   *\r\n   * @return {Object} A Title card.\r\n   */\r\n  createCard() {\r\n    /** @type {Object[]} */\r\n    const cards = [\r\n      {\r\n        type: \"custom:mushroom-title-card\",\r\n        title: this.#options.title,\r\n        subtitle: this.#options.subtitle,\r\n      },\r\n    ];\r\n\r\n    if (this.#options.showControls) {\r\n      cards.push({\r\n        type: \"horizontal-stack\",\r\n        cards: [\r\n          {\r\n            type: \"custom:mushroom-template-card\",\r\n            icon: this.#options.iconOff,\r\n            layout: \"vertical\",\r\n            icon_color: \"red\",\r\n            tap_action: {\r\n              action: \"call-service\",\r\n              service: this.#options.offService,\r\n              target: {\r\n                area_id: this.#areaIds,\r\n              },\r\n              data: {},\r\n            },\r\n          },\r\n          {\r\n            type: \"custom:mushroom-template-card\",\r\n            icon: this.#options.iconOn,\r\n            layout: \"vertical\",\r\n            icon_color: \"amber\",\r\n            tap_action: {\r\n              action: \"call-service\",\r\n              service: this.#options.onService,\r\n              target: {\r\n                area_id: this.#areaIds,\r\n              },\r\n              data: {},\r\n            },\r\n          },\r\n        ],\r\n      });\r\n    }\r\n\r\n    return {\r\n      type: \"horizontal-stack\",\r\n      cards: cards,\r\n    };\r\n  }\r\n}\r\n\r\nexport {TitleCard};\r\n","/**\r\n * @namespace typedefs.cards\r\n */\r\n\r\n/**\r\n * @typedef {Object} abstractOptions\r\n * @property {string} [type] The type of the card.\r\n * @property {string} [icon] Icon of the card.\r\n * @property {Object} [double_tap_action] Home assistant action to perform on double_tap.\r\n */\r\n\r\n/**\r\n * @typedef {Object} titleCardOptions Title Card options.\r\n * @property {string} [title] Title to render. May contain templates.\r\n * @property {string} [subtitle] Subtitle to render. May contain templates.\r\n * @property {boolean} [showControls=true] False to hide controls.\r\n * @property {string} [iconOn] Icon to show for switching entities from off state.\r\n * @property {string} [iconOff] Icon to show for switching entities to off state.\r\n * @property {string} [onService=none] Service to call for switching entities from off state.\r\n * @property {string} [offService=none] Service to call for switching entities to off state.\r\n * @memberOf typedefs.cards\r\n */\r\n\r\n/**\r\n * @typedef {abstractOptions & Object} lightCardOptions Light Card options.\r\n * @property {boolean} [show_brightness_control=true]  Show a slider to control brightness\r\n * @property {boolean} [show_color_control=true] Show a slider to control RGB color\r\n * @property {boolean} [use_light_color=true] Colorize the icon and slider according light temperature or color\r\n * @property {{double_tap_action: lightDoubleTapAction}} [action] Home assistant action to perform on double_tap\r\n * @memberOf typedefs.cards\r\n */\r\n\r\n/**\r\n * @typedef {Object} lightDoubleTapAction Home assistant action to perform on double_tap.\r\n * @property {{entity_id: string}} target The target entity id.\r\n * @property {\"call-service\"} action Calls a hass service.\r\n * @property {\"light.turn_on\"} service The hass service to call\r\n * @property {{rgb_color: [255, 255, 255]}} data The data payload for the service.\r\n * @memberOf typedefs.cards\r\n */\r\n\r\n/**\r\n * @typedef {abstractOptions & Object} coverCardOptions Cover Card options.\r\n * @property {boolean} [show_buttons_control=true] Show buttons to open, close and stop cover.\r\n * @property {boolean} [show_position_control=true] Show a slider to control position of the cover.\r\n * @property {boolean} [show_tilt_position_control=true] Show a slider to control tilt position of the cover.\r\n * @memberOf typedefs.cards\r\n */\r\n\r\n/**\r\n * @typedef {abstractOptions & Object} fanCardOptions Fan Card options.\r\n * @property {boolean} [show_percentage_control=true] Show a slider to control speed.\r\n * @property {boolean} [show_oscillate_control=true] Show a button to control oscillation.\r\n * @property {boolean} [icon_animation=true] Animate the icon when fan is on.\r\n * @memberOf typedefs.cards\r\n */\r\n\r\n/**\r\n * @typedef {abstractOptions & Object} lockCardOptions Lock Card options.\r\n * @memberOf typedefs.cards\r\n */\r\n\r\n/**\r\n * @typedef {abstractOptions & Object} switchCardOptions Switch Card options.\r\n * @property {{tap_action: switchTapAction}} [action] Home assistant action to perform on tap.\r\n * @memberOf typedefs.cards\r\n */\r\n\r\n/**\r\n * @typedef {Object} switchTapAction Home assistant action to perform on tap.\r\n * @property {\"toggle\"} action Toggles a hass entity.\r\n * @memberOf typedefs.cards\r\n */\r\n\r\n/**\r\n * @typedef {abstractOptions & Object} climateCardOptions Climate Card options.\r\n * @property {[\"off\", \"cool\", \"heat\", \"fan_only\"]} [hvac_modes] Show buttons to control target temperature.\r\n * @property {boolean} [show_temperature_control=true] Show buttons to control target temperature.\r\n * @memberOf typedefs.cards\r\n */\r\n\r\n/**\r\n * @typedef {abstractOptions} cameraCardOptions Camera Card options.\r\n * @memberOf typedefs.cards\r\n */\r\n\r\n/**\r\n * @typedef {abstractOptions & Object} personCardOptions Person Card options.\r\n * @property {string} [layout] Layout of the card. Vertical, horizontal, and default layouts are supported.\r\n * @property {(\"name\" | \"state\" | \"last-changed\" | \"last-updated\" | \"none\")} [primary_info=name] Info to show as\r\n *     primary info.\r\n * @property {(\"name\" | \"state\" | \"last-changed\" | \"last-updated\" | \"none\")} [secondary_info=sate] Info to show as\r\n *     secondary info.\r\n * @property {(\"icon\" | \"entity-picture\" | \"none\")} [icon_type]=icon Type of icon to display.\r\n * @memberOf typedefs.cards\r\n */\r\n\r\n/**\r\n * @typedef {abstractOptions & Object} areaCardOptions Area Card options.\r\n * @property {string} [name] The name of the area\r\n * @property {string} [icon] Icon to render. May contain templates.\r\n * @property {string} [icon_color] Icon color to render. May contain templates.\r\n * @property {string} [title] Primary info to render. May contain templates.\r\n * @property {areaTapAction} [tap_action] Home assistant action to perform on tap.\r\n * @memberOf typedefs.cards\r\n */\r\n\r\n/**\r\n * @typedef {Object} areaTapAction Home assistant action to perform on tap.\r\n * @property {\"navigate\"} action Toggles a hass entity.\r\n * @property {string} navigation_path The id of the area to navigate to.\r\n * @memberOf typedefs.cards\r\n */\r\n\r\n/**\r\n * @typedef {abstractOptions & Object} mediaPlayerCardOptions Media Player Card options.\r\n * @property {boolean} [use_media_info=true] Use media info instead of name, state, and icon when a media is playing\r\n * @property {string[]} [media_controls=\"on_off\", \"play_pause_stop\"] List of controls to display\r\n *                                                                   (on_off, shuffle, previous, play_pause_stop, next,\r\n *                                                                   repeat)\r\n * @property {boolean} [show_volume_level=true] Show volume level next to media state when media is playing\r\n * @property {string[]} [volume_controls=\"volume_mute\", \"volume_set\", \"volume_buttons\"] List of controls to display\r\n *                                                                                      (volume_mute, volume_set,\r\n *                                                                                      volume_buttons)\r\n * @memberOf typedefs.cards\r\n */\r\n\r\n/**\r\n * @typedef {abstractOptions & Object} sensorCardOptions Sensor Card options.\r\n * @property {string} [icon_color=green] Custom color for icon when entity is state is active.\r\n * @property {boolean} [animate=true] Add a reveal animation to the graph.\r\n * @property {string} [line_color=green] Set a custom color for the graph line.\r\n *                                       Provide a list of colors for multiple graph entries.\r\n * @memberOf typedefs.cards\r\n */\r\n\r\n/**\r\n * @typedef {abstractOptions & Object} miscellaneousCardOptions Miscellaneous Card options.\r\n * @property {string} [icon_color=blue-grey] Custom color for icon when entity is state is active.\r\n * @memberOf typedefs.cards\r\n */\r\n\r\n","var map = {\n\t\"./AbstractCard\": [\n\t\t\"./src/cards/AbstractCard.js\",\n\t\t9,\n\t\t\"main\"\n\t],\n\t\"./AbstractCard.js\": [\n\t\t\"./src/cards/AbstractCard.js\",\n\t\t9,\n\t\t\"main\"\n\t],\n\t\"./AreaCard\": [\n\t\t\"./src/cards/AreaCard.js\",\n\t\t9,\n\t\t\"main\"\n\t],\n\t\"./AreaCard.js\": [\n\t\t\"./src/cards/AreaCard.js\",\n\t\t9,\n\t\t\"main\"\n\t],\n\t\"./LightCard\": [\n\t\t\"./src/cards/LightCard.js\",\n\t\t9,\n\t\t\"main\"\n\t],\n\t\"./LightCard.js\": [\n\t\t\"./src/cards/LightCard.js\",\n\t\t9,\n\t\t\"main\"\n\t],\n\t\"./MiscellaneousCard\": [\n\t\t\"./src/cards/MiscellaneousCard.js\",\n\t\t9,\n\t\t\"main\"\n\t],\n\t\"./MiscellaneousCard.js\": [\n\t\t\"./src/cards/MiscellaneousCard.js\",\n\t\t9,\n\t\t\"main\"\n\t],\n\t\"./TitleCard\": [\n\t\t\"./src/cards/TitleCard.js\",\n\t\t9\n\t],\n\t\"./TitleCard.js\": [\n\t\t\"./src/cards/TitleCard.js\",\n\t\t9\n\t],\n\t\"./typedefs\": [\n\t\t\"./src/cards/typedefs.js\",\n\t\t7,\n\t\t\"main\"\n\t],\n\t\"./typedefs.js\": [\n\t\t\"./src/cards/typedefs.js\",\n\t\t7,\n\t\t\"main\"\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(() => {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn Promise.all(ids.slice(2).map(__webpack_require__.e)).then(() => {\n\t\treturn __webpack_require__.t(id, ids[1] | 16)\n\t});\n}\nwebpackAsyncContext.keys = () => (Object.keys(map));\nwebpackAsyncContext.id = \"./src/cards lazy recursive ^\\\\.\\\\/.*$\";\nmodule.exports = webpackAsyncContext;","import {Helper} from \"Helper\";\r\n\r\nclass CoverChip {\r\n  #areaIds;\r\n  #options = {\r\n    // No default options.\r\n  };\r\n\r\n  constructor(areaIds, options = {}) {\r\n    if (!Helper.isInitialized()) {\r\n      throw new Error(\"The Helper module must be initialized before using this one.\");\r\n    }\r\n\r\n    this.#areaIds = areaIds.filter(areaId => areaId);\r\n    this.#options = {\r\n      ...this.#options,\r\n      ...options,\r\n    };\r\n  }\r\n\r\n  getChip() {\r\n    return {\r\n      type: \"template\",\r\n      icon: \"mdi:window-open\",\r\n      icon_color: \"cyan\",\r\n      content: Helper.getCountTemplate(\"cover\", \"eq\", \"open\"),\r\n      tap_action: {\r\n        action: \"navigate\",\r\n        navigation_path: \"covers\",\r\n      },\r\n    };\r\n  }\r\n}\r\n\r\nexport {CoverChip};\r\n","import {Helper} from \"Helper\";\r\n\r\nclass FanChip {\r\n  #areaIds;\r\n  #options = {\r\n    // No default options.\r\n  };\r\n\r\n  constructor(areaIds, options = {}) {\r\n    if (!Helper.isInitialized()) {\r\n      throw new Error(\"The Helper module must be initialized before using this one.\");\r\n    }\r\n\r\n    this.#areaIds = areaIds.filter(areaId => areaId);\r\n    this.#options = {\r\n      ...this.#options,\r\n      ...options,\r\n    };\r\n  }\r\n\r\n  getChip() {\r\n    return {\r\n      type: \"template\",\r\n      icon: \"mdi:fan\",\r\n      icon_color: \"green\",\r\n      content: Helper.getCountTemplate(\"fan\", \"eq\", \"on\"),\r\n      tap_action: {\r\n        action: \"navigate\",\r\n        navigation_path: \"fans\",\r\n      },\r\n    };\r\n  }\r\n}\r\n\r\nexport {FanChip};\r\n","import {Helper} from \"Helper\";\r\n\r\nclass LightChip {\r\n  #areaIds;\r\n  #options = {\r\n    // No default options.\r\n  };\r\n\r\n  constructor(areaIds, options = {}) {\r\n    if (!Helper.isInitialized()) {\r\n      throw new Error(\"The Helper module must be initialized before using this one.\");\r\n    }\r\n\r\n    this.#areaIds = areaIds.filter(areaId => areaId);\r\n    this.#options = {\r\n      ...this.#options,\r\n      ...options,\r\n    };\r\n  }\r\n\r\n  getChip() {\r\n    return {\r\n      type: \"template\",\r\n      icon: \"mdi:lightbulb-group\",\r\n      icon_color: \"amber\",\r\n      content: Helper.getCountTemplate(\"light\", \"eq\", \"on\"),\r\n      tap_action: {\r\n        action: \"navigate\",\r\n        navigation_path: \"lights\",\r\n      },\r\n    };\r\n  }\r\n}\r\n\r\nexport {LightChip};\r\n","var map = {\n\t\"./CoverChip\": [\n\t\t\"./src/chips/CoverChip.js\",\n\t\t\"main\"\n\t],\n\t\"./CoverChip.js\": [\n\t\t\"./src/chips/CoverChip.js\",\n\t\t\"main\"\n\t],\n\t\"./FanChip\": [\n\t\t\"./src/chips/FanChip.js\",\n\t\t\"main\"\n\t],\n\t\"./FanChip.js\": [\n\t\t\"./src/chips/FanChip.js\",\n\t\t\"main\"\n\t],\n\t\"./LightChip\": [\n\t\t\"./src/chips/LightChip.js\",\n\t\t\"main\"\n\t],\n\t\"./LightChip.js\": [\n\t\t\"./src/chips/LightChip.js\",\n\t\t\"main\"\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(() => {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(() => {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = () => (Object.keys(map));\nwebpackAsyncContext.id = \"./src/chips lazy recursive ^\\\\.\\\\/.*$\";\nmodule.exports = webpackAsyncContext;","export const optionDefaults = {\r\n  debug: true,\r\n  views: {\r\n    home: {\r\n      order: 1,\r\n      hidden: false,\r\n    }\r\n  }, areas: {\r\n    undisclosed: {\r\n      aliases: [],\r\n      area_id: null,\r\n      name: \"Undisclosed\",\r\n      picture: null,\r\n      hidden: false,\r\n    }\r\n  }, domains: {\r\n    default: {\r\n      title: \"Miscellaneous\",\r\n      showControls: false,\r\n      hidden: false,\r\n    },\r\n    light: {\r\n      title: \"Lights\",\r\n      showControls: true,\r\n      iconOn: \"mdi:lightbulb\",\r\n      iconOff: \"mdi:lightbulb-off\",\r\n      onService: \"light.turn_on\",\r\n      offService: \"light.turn_off\",\r\n      hidden: false,\r\n    },\r\n  }\r\n}","import {Helper} from \"Helper\";\r\n\r\n/**\r\n * Abstract View Class.\r\n *\r\n * To create a new view, extend the new class with this one.\r\n *\r\n * @class\r\n * @abstract\r\n */\r\nclass AbstractView {\r\n  /**\r\n   * Options for creating a view.\r\n   *\r\n   * @type {abstractOptions}\r\n   */\r\n  options = {\r\n    title: null,\r\n    path: null,\r\n    icon: \"mdi:view-dashboard\",\r\n    subview: false,\r\n  };\r\n\r\n  /**\r\n   * Class constructor.\r\n   *\r\n   * @throws {Error} If trying to instantiate this class.\r\n   * @throws {Error} If the Helper module isn't initialized.\r\n   */\r\n  constructor() {\r\n    if (this.constructor === AbstractView) {\r\n      throw new Error(\"Abstract classes can't be instantiated.\");\r\n    }\r\n\r\n    if (!Helper.isInitialized()) {\r\n      throw new Error(\"The Helper module must be initialized before using this one.\");\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Merge the default options of this class and the custom options into the options of the parent class.\r\n   *\r\n   * @param {Object} [defaultOptions={}] Default options for the card.\r\n   * @param {Object} [customOptions={}] Custom Options for the card.\r\n   */\r\n  mergeOptions(defaultOptions, customOptions) {\r\n    this.options = {\r\n      ...defaultOptions,\r\n      ...customOptions,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Create the cards to include in the view.\r\n   *\r\n   * @return {Object[] | Promise} An array of card objects.\r\n   */\r\n  async createViewCards() {\r\n    return [];\r\n  }\r\n\r\n  /**\r\n   * Get a view object.\r\n   *\r\n   * The view includes the cards which are created by method createViewCards().\r\n   *\r\n   * @returns {viewOptions & {cards: Object[]}} The view object.\r\n   */\r\n  async getView() {\r\n    return {\r\n      ...this.options,\r\n      cards: await this.createViewCards(),\r\n    };\r\n  }\r\n}\r\n\r\nexport {AbstractView};\r\n","import {Helper} from \"Helper\";\r\nimport {AbstractView} from \"views/AbstractView\";\r\nimport {TitleCard} from \"cards/TitleCard\";\r\n\r\n/**\r\n * Area View Class.\r\n *\r\n * Used to create a Area view.\r\n *\r\n * @class AreaView\r\n * @extends AbstractView\r\n */\r\nclass AreaView extends AbstractView {\r\n  /**\r\n   * Default options for the view.\r\n   * \r\n   * @type {viewOptions}\r\n   * @private\r\n   */\r\n  #defaultOptions = {\r\n    subview: true,\r\n  };\r\n\r\n  #area = undefined;\r\n\r\n  #domain = undefined;\r\n\r\n  /**\r\n   * Class constructor.\r\n   *\r\n   * @param {viewOptions} [options={}] Options for the view.\r\n   */\r\n  constructor(options = {}, area = undefined, domain = undefined) {\r\n    super();\r\n    this.mergeOptions(\r\n        this.#defaultOptions,\r\n        options,\r\n    );\r\n    this.#area = area;\r\n    this.#domain = domain;\r\n  }\r\n\r\n  /**\r\n   * Create the cards to include in the view.\r\n   *\r\n   * @return {Promise} A promise of a card object array.\r\n   * @override\r\n   */\r\n  async createViewCards() {\r\n    const exposedDomainIds = Helper.getExposedDomainIds();\r\n    const area             = this.#area;\r\n    const viewCards        = [...(area.extra_cards ?? [])];\r\n\r\n    // Create cards for each domain.\r\n    for (const domain of exposedDomainIds) {\r\n      if (domain === \"default\") {\r\n        continue;\r\n      }\r\n\r\n      if (this.#domain && domain !== this.#domain) {\r\n        continue;\r\n      }\r\n\r\n      const className = Helper.sanitizeClassName(domain + \"Card\");\r\n\r\n      let domainCards = [];\r\n\r\n      try {\r\n        domainCards = await import(`cards/${className}`).then(cardModule => {\r\n          let domainCards = [];\r\n          const entities  = Helper.getDeviceEntities(area, domain);\r\n          if (entities.length) {\r\n            // Create a Title card for the current domain.\r\n            const titleCard = new TitleCard(\r\n                [area],\r\n                Helper.strategyOptions.domains[domain],\r\n            ).createCard();\r\n\r\n            if (domain === \"sensor\") {\r\n              // Create a card for each entity-sensor of the current area.\r\n              const sensorStates = Helper.getStateEntities(area, \"sensor\");\r\n              const sensorCards  = [];\r\n\r\n              for (const sensor of entities) {\r\n                // Find the state of the current sensor.\r\n                const sensorState = sensorStates.find(state => state.entity_id === sensor.entity_id);\r\n                let cardOptions   = Helper.strategyOptions.card_options?.[sensor.entity_id] ?? {};\r\n\r\n                if (!cardOptions.hidden) {\r\n                  if (sensorState?.attributes.unit_of_measurement) {\r\n                    cardOptions = {\r\n                      ...{\r\n                        type: \"custom:mini-graph-card\",\r\n                        entities: [sensor.entity_id],\r\n                      },\r\n                      ...cardOptions,\r\n                    };\r\n                  }\r\n\r\n                  sensorCards.push(new SensorCard(sensor, cardOptions).getCard());\r\n                }\r\n              }\r\n\r\n              if (sensorCards.length) {\r\n                domainCards.push({\r\n                  type: \"vertical-stack\",\r\n                  cards: sensorCards,\r\n                });\r\n\r\n                domainCards.unshift(titleCard);\r\n              }\r\n\r\n              return domainCards;\r\n            }\r\n\r\n            // Create a card for each domain-entity of the current area.\r\n            for (const entity of entities) {\r\n              let cardOptions = Helper.strategyOptions.card_options?.[entity.entity_id] ?? {};\r\n\r\n              if (!cardOptions.hidden) {\r\n                cardOptions.name = (entity.name ?? Helper.getName(entity.entity_id.split('.')[1]))\r\n                  .replace(area.name, \"\")\r\n                  .replace(domain.replace(/^([a-z])/g, group => group.toUpperCase())+\"s\", \"\")\r\n                  .trim();\r\n                domainCards.push(new cardModule[className](entity, cardOptions).getCard());\r\n              }\r\n            }\r\n\r\n            if (domain === \"binary_sensor\") {\r\n              // Horizontally group every two binary sensor cards.\r\n              const horizontalCards = [];\r\n\r\n              for (let i = 0; i < domainCards.length; i += 2) {\r\n                horizontalCards.push({\r\n                  type: \"horizontal-stack\",\r\n                  cards: domainCards.slice(i, i + 2),\r\n                });\r\n              }\r\n\r\n              domainCards = horizontalCards;\r\n            }\r\n\r\n            if (domainCards.length) {\r\n              domainCards.unshift(titleCard);\r\n            }\r\n          }\r\n\r\n          return domainCards;\r\n        });\r\n      } catch (e) {\r\n        console.error(e);\r\n      }\r\n\r\n      if (domainCards.length) {\r\n        viewCards.push({\r\n          type: \"vertical-stack\",\r\n          cards: domainCards,\r\n        });\r\n      }\r\n    }\r\n\r\n    if (!this.#domain && !Helper.strategyOptions.domains.default.hidden) {\r\n      // TODO: Check if default is hidden\r\n      // Create cards for any other domain.\r\n      // Collect device entities of the current area.\r\n      const areaDevices = Helper.devices.filter(device => device.area_id === area.area_id)\r\n          .map(device => device.id);\r\n  \r\n      // Collect the remaining entities of which all conditions below are met:\r\n      // 1. The entity is linked to a device which is linked to the current area,\r\n      //    or the entity itself is linked to the current area.\r\n      // 2. The entity is not hidden and is not disabled.\r\n      const miscellaneousEntities = Helper.entities.filter(entity => {\r\n        return (areaDevices.includes(entity.device_id) || entity.area_id === area.area_id)\r\n            && entity.hidden_by == null\r\n            && entity.disabled_by == null\r\n            && !exposedDomainIds.includes(entity.entity_id.split(\".\", 1)[0]);\r\n      });\r\n  \r\n      // Create a column of miscellaneous entity cards.\r\n      if (miscellaneousEntities.length) {\r\n        let miscellaneousCards = [];\r\n  \r\n        try {\r\n          miscellaneousCards = await import(\"cards/MiscellaneousCard\").then(cardModule => {\r\n            /** @type Object[] */\r\n            const miscellaneousCards = [\r\n              new TitleCard([area], Helper.strategyOptions.domains.default).createCard(),\r\n            ];\r\n  \r\n            for (const entity of miscellaneousEntities) {\r\n              let cardOptions = Helper.strategyOptions.card_options?.[entity.entity_id] ?? {};\r\n              cardOptions.name = (entity.name ?? Helper.getName(entity.entity_id.split('.')[1]))\r\n                .replace(area.name, \"\")\r\n                .trim();\r\n              if (!cardOptions.hidden) {\r\n                miscellaneousCards.push(new cardModule.MiscellaneousCard(entity, cardOptions).getCard());\r\n              }\r\n            }\r\n  \r\n            return miscellaneousCards;\r\n          });\r\n        } catch (e) {\r\n          console.error(Helper.debug ? e : \"An error occurred while creating the domain cards!\");\r\n        }\r\n  \r\n        viewCards.push({\r\n          type: \"vertical-stack\",\r\n          cards: miscellaneousCards,\r\n        });\r\n      }\r\n    }\r\n\r\n    // Return cards.\r\n    return viewCards;\r\n  }\r\n}\r\n\r\nexport {AreaView};\r\n","import {Helper} from \"Helper\";\r\nimport {AbstractView} from \"views/AbstractView\";\r\n\r\n/**\r\n * Domain View Class.\r\n *\r\n * Used to create a Domain view.\r\n *\r\n * @class DomainView\r\n * @extends AbstractView\r\n */\r\nclass DomainView extends AbstractView {\r\n  /**\r\n   * Default options for the view.\r\n   * \r\n   * @type {viewOptions}\r\n   * @private\r\n   */\r\n  #defaultOptions = {\r\n    subview: true\r\n  };\r\n\r\n  /**\r\n   * Class constructor.\r\n   *\r\n   * @param {viewOptions} [options={}] Options for the view.\r\n   */\r\n  constructor(options = {}, domain = undefined) {\r\n    super();\r\n    this.mergeOptions(\r\n        this.#defaultOptions,\r\n        options,\r\n    );\r\n    this.#domain = domain;\r\n  }\r\n\r\n  #domain = undefined\r\n\r\n /**\r\n   * Create the cards to include in the view.\r\n   *\r\n   * @return {Object[] | Promise} An array of card objects.\r\n   */\r\n  async createViewCards() {\r\n    let cards = [\r\n      {\r\n        type: \"custom:auto-entities\",\r\n        card: {\r\n          type: \"grid\",\r\n          columns: 1,\r\n          square: false,\r\n          title: `${this.#domain.charAt(0).toUpperCase()}${this.#domain.slice(1)}s on`\r\n        },\r\n        card_param: \"cards\",\r\n        filter: {\r\n          include: [\r\n            {\r\n              domain: this.#domain,\r\n              state: `${this.#domain==\"cover\" ? \"open\": \"on\"}`,\r\n              options: {\r\n                type: `custom:mushroom-${this.#domain}-card`,\r\n                show_brightness_control: true,\r\n                layout: \"horizontal\"\r\n              }\r\n            }\r\n          ]\r\n        }\r\n      }\r\n    ];\r\n    console.log(cards);\r\n    return cards;\r\n   \r\n  }\r\n}\r\n\r\nexport {DomainView};\r\n","import {Helper} from \"Helper\";\r\nimport {AbstractView} from \"views/AbstractView\";\r\n\r\n/**\r\n * Home View Class.\r\n *\r\n * Used to create a Home view.\r\n *\r\n * @class HomeView\r\n * @extends AbstractView\r\n */\r\nclass HomeView extends AbstractView {\r\n  /**\r\n   * Default options for the view.\r\n   * \r\n   * @type {viewOptions}\r\n   * @private\r\n   */\r\n  #defaultOptions = {\r\n    title: \"Home\",\r\n    path: \"home\",\r\n    subview: false,\r\n  };\r\n\r\n  /**\r\n   * Class constructor.\r\n   *\r\n   * @param {viewOptions} [options={}] Options for the view.\r\n   */\r\n  constructor(options = {}) {\r\n    super();\r\n    this.mergeOptions(\r\n        this.#defaultOptions,\r\n        options,\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Create the cards to include in the view.\r\n   *\r\n   * @return {Promise} A promise of a card object array.\r\n   * @override\r\n   */\r\n  async createViewCards() {\r\n    return await Promise.all([\r\n      this.#createAreaCards(),\r\n      this.#createChips()\r\n    ]).then(([areaCards, chips]) => {\r\n      const options       = Helper.strategyOptions;\r\n      const homeViewCards = [\r\n        {\r\n          type: \"custom:mushroom-template-card\",\r\n          primary: \"{% set time = now().hour %} {% if (time >= 18) %} Good Evening, {{user}}! {% elif (time >= 12) %} Good Afternoon, {{user}}! {% elif (time >= 5) %} Good Morning, {{user}}! {% else %} Hello, {{user}}! {% endif %}\",\r\n          icon: \"mdi:hand-wave\",\r\n          icon_color: \"orange\",\r\n          tap_action: {\r\n            action: \"none\",\r\n          },\r\n          double_tap_action: {\r\n            action: \"none\",\r\n          },\r\n          hold_action: {\r\n            action: \"none\",\r\n          },\r\n        },\r\n        {\r\n          type: \"custom:mushroom-chips-card\",\r\n          alignment: \"center\",\r\n          chips: chips,\r\n        },\r\n      ];\r\n\r\n      // Add area cards.\r\n      homeViewCards.push({\r\n            type: \"custom:mushroom-title-card\",\r\n            title: \"Areas\",\r\n          },\r\n          {\r\n            type: \"vertical-stack\",\r\n            cards: areaCards,\r\n          });\r\n\r\n      return homeViewCards;\r\n    });\r\n  }\r\n\r\n  \r\n  /**\r\n   * Create the chips to include in the view.\r\n   *\r\n   * @return {Object[]} A chip object array.\r\n   */\r\n  async #createChips() {\r\n    const chips       = [];\r\n    const chipOptions = Helper.strategyOptions.chips;\r\n\r\n    // TODO: Get domains from config.\r\n    const exposed_chips = [\"light\",\"fan\",\"cover\"];\r\n    // Create a list of area-ids, used for switching all devices via chips\r\n    const areaIds       = Helper.areas.map(area => area.area_id);\r\n\r\n    let chipModule;\r\n\r\n    // Numeric chips.\r\n    for (let chipType of exposed_chips) {\r\n      if (chipOptions?.[`${chipType}_count`] ?? true) {\r\n        const className = Helper.sanitizeClassName(chipType + \"Chip\");\r\n        try {\r\n          chipModule = await import((`chips/${className}`));\r\n          const chip = new chipModule[className](areaIds);\r\n          chips.push(chip.getChip());\r\n        } catch (e) {\r\n          console.error(Helper.debug ? e : `An error occurred while creating the ${chipType} chip!`);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Extra chips.\r\n    if (chipOptions?.extra_chips) {\r\n      chips.push(...chipOptions.extra_chips);\r\n    }\r\n\r\n    return chips;\r\n  }\r\n\r\n\r\n  /**\r\n   * Create the area cards to include in the view.\r\n   *\r\n   * Area cards are grouped into two areas per row.\r\n   *\r\n   * @return {Object[]} A card object array.\r\n   */\r\n  #createAreaCards() {\r\n    const groupedCards = [];\r\n\r\n    import(\"cards/AreaCard\").then(areaModule => {\r\n      const areaCards = [];\r\n\r\n      for (const area of Helper.areas) {\r\n        if (!Helper.strategyOptions.areas[area.area_id]?.hidden) {\r\n          areaCards.push(\r\n              new areaModule.AreaCard(area, Helper.strategyOptions.areas[area.area_id ?? \"undisclosed\"]).getCard());\r\n        }\r\n      }\r\n\r\n      // Horizontally group every two area cards.\r\n      for (let i = 0; i < areaCards.length; i += 2) {\r\n        groupedCards.push({\r\n          type: \"horizontal-stack\",\r\n          cards: areaCards.slice(i, i + 2),\r\n        });\r\n      }\r\n    });\r\n\r\n    return groupedCards;\r\n  }\r\n}\r\n\r\nexport {HomeView};\r\n","/**\r\n * @namespace typedefs.views\r\n */\r\n\r\n/**\r\n * @typedef {Object} abstractOptions Options to create a view.\r\n * @property {string} [title] The title or name.\r\n * @property {string} [path] Paths are used in the URL.\r\n * @property {string} [icon] The icon of the view.\r\n * @property {boolean} subview  Mark the view as “Subview”.\r\n * @memberOf typedefs.views\r\n * @see https://www.home-assistant.io/dashboards/views/\r\n */\r\n\r\n/**\r\n * @typedef {abstractOptions & Object} viewOptions Options for the extended View class.\r\n * @property {titleCardOptions} [titleCard] Options for the title card of the view.\r\n * @memberOf typedefs.views\r\n */\r\n\r\n/**\r\n * @typedef {Object} titleCardOptions Options for the title card of the view.\r\n * @property {string} iconOn Icon to show for switching entities from off state.\r\n * @property {string} iconOff Icon to show for switching entities to off state.\r\n * @property {string} onService Service to call for switching entities from off state.\r\n * @property {string} offService Service to call for switching entities to off state.\r\n * @memberOf typedefs.views\r\n */\r\n\r\n/**\r\n * @typedef {Object} viewTitleCardOptions Options for the view's title card.\r\n * @property {string} [title] Title to render. May contain templates.\r\n * @property {string} [subtitle] Subtitle to render. May contain templates.\r\n * @property {boolean} [showControls=true] False to hide controls.\r\n * @memberOf typedefs.views\r\n */\r\n\r\nexport {};\r\n","var map = {\n\t\"./AbstractView\": [\n\t\t\"./src/views/AbstractView.js\",\n\t\t\"main\"\n\t],\n\t\"./AbstractView.js\": [\n\t\t\"./src/views/AbstractView.js\",\n\t\t\"main\"\n\t],\n\t\"./AreaView\": [\n\t\t\"./src/views/AreaView.js\",\n\t\t\"main\"\n\t],\n\t\"./AreaView.js\": [\n\t\t\"./src/views/AreaView.js\",\n\t\t\"main\"\n\t],\n\t\"./DomainView\": [\n\t\t\"./src/views/DomainView.js\",\n\t\t\"main\"\n\t],\n\t\"./DomainView.js\": [\n\t\t\"./src/views/DomainView.js\",\n\t\t\"main\"\n\t],\n\t\"./HomeView\": [\n\t\t\"./src/views/HomeView.js\",\n\t\t\"main\"\n\t],\n\t\"./HomeView.js\": [\n\t\t\"./src/views/HomeView.js\",\n\t\t\"main\"\n\t],\n\t\"./typedefs\": [\n\t\t\"./src/views/typedefs.js\",\n\t\t\"main\"\n\t],\n\t\"./typedefs.js\": [\n\t\t\"./src/views/typedefs.js\",\n\t\t\"main\"\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(() => {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(() => {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = () => (Object.keys(map));\nwebpackAsyncContext.id = \"./src/views lazy recursive ^\\\\.\\\\/.*$\";\nmodule.exports = webpackAsyncContext;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","var getProto = Object.getPrototypeOf ? (obj) => (Object.getPrototypeOf(obj)) : (obj) => (obj.__proto__);\nvar leafPrototypes;\n// create a fake namespace object\n// mode & 1: value is a module id, require it\n// mode & 2: merge all properties of value into the ns\n// mode & 4: return value when already ns object\n// mode & 16: return value when it's Promise-like\n// mode & 8|1: behave like require\n__webpack_require__.t = function(value, mode) {\n\tif(mode & 1) value = this(value);\n\tif(mode & 8) return value;\n\tif(typeof value === 'object' && value) {\n\t\tif((mode & 4) && value.__esModule) return value;\n\t\tif((mode & 16) && typeof value.then === 'function') return value;\n\t}\n\tvar ns = Object.create(null);\n\t__webpack_require__.r(ns);\n\tvar def = {};\n\tleafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];\n\tfor(var current = mode & 2 && value; typeof current == 'object' && !~leafPrototypes.indexOf(current); current = getProto(current)) {\n\t\tObject.getOwnPropertyNames(current).forEach((key) => (def[key] = () => (value[key])));\n\t}\n\tdef['default'] = () => (value);\n\t__webpack_require__.d(ns, def);\n\treturn ns;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","// The chunk loading function for additional chunks\n// Since all referenced chunks are already included\n// in this file, this function is empty here.\n__webpack_require__.e = () => (Promise.resolve());","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import {Helper} from \"Helper\";\r\n\r\nclass JamesStrategy {\r\n\r\n  static async generateDashboard(info) {\r\n    await Helper.initialize(info);\r\n    \r\n    // Create views.\r\n    const views = [];\r\n\r\n    let viewModule;\r\n\r\n    for (let viewId of Helper.getExposedViewIds()) {\r\n      try {\r\n        const viewType = Helper.sanitizeClassName(viewId + \"View\");\r\n        viewModule     = await import(`views/${viewType}`);\r\n        const view     = await new viewModule[viewType](Helper.strategyOptions.views[viewId]).getView();\r\n\r\n        views.push(view);\r\n\r\n      } catch (e) {\r\n        console.error(Helper.debug ? e : `View '${viewId}' couldn't be loaded!`);\r\n      }\r\n    }\r\n\r\n    let areaViewModule     = await import(`views/AreaView`);\r\n\r\n    // Create subviews for each area.\r\n    for (let area of Helper.areas) {\r\n      if (!area.hidden) {\r\n        views.push(\r\n          await new areaViewModule[\"AreaView\"]({\r\n            path: area.area_id ?? area.name\r\n          }, area).getView()\r\n        );\r\n        let exposedDomainIds = Helper.getExposedDomainIds();\r\n        for (let domain of exposedDomainIds) {\r\n          views.push(\r\n            await new areaViewModule[\"AreaView\"]({\r\n              path: [area.area_id ?? area.name, domain].join(\"_\")\r\n            }, area, domain).getView()\r\n          );\r\n        }\r\n      }\r\n    }\r\n\r\n    let domainViewModule     = await import(`views/DomainView`);\r\n\r\n    // Create subviews for each area.\r\n    for (let domain of [\"light\",\"fan\",\"cover\"]) {\r\n      views.push(\r\n        await new domainViewModule[\"DomainView\"]({\r\n          path: `${domain}s`\r\n        }, domain).getView()\r\n      );\r\n    }\r\n\r\n    return {\r\n      views: views,\r\n    };\r\n  }\r\n\r\n}\r\n\r\ncustomElements.define(\"ll-strategy-james-strategy\", JamesStrategy);"],"names":[],"sourceRoot":""}