{"version":3,"file":"james-strategy.js","mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;;;;;;;;;;;;;;;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AC9CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACbO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,8DAA8D;AAC9E;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACZqD;AACM;AAC3D;AACA;AACA;AACA;AACA,UAAU,2BAA2B;AACrC;AACA;AACA;AACA,eAAe,4CAA4C;AAC3D,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,yDAAS;AAChB,QAAQ,0DAAU;AAClB;AACA,OAAO,+DAAY,0BAA0B,4BAA4B;AACzE;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AC1BA;AACA;AACA;AACA,UAAU,0BAA0B;AACpC;AACA;AACA;;;;;;;UCNA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;WACA;WACA;WACA;;;;;WCHA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;ACNqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,mCAAmC;AACzD,sBAAsB,qCAAqC;AAC3D,sBAAsB,qCAAqC;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,iDAAQ;AAC/B,4BAA4B,kEAAO,GAAO,EAAE,SAAS,IAAI,CAAC;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,kEAAO,GAAO,EAAE,gCAAgC,IAAI,CAAC;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0D","sources":["webpack://james-strategy/./src/views/ lazy ^\\.\\/.*\\.js$ strict namespace object","webpack://james-strategy/./src/cards/ChipsCard.js","webpack://james-strategy/./src/cards/MarkdownCard.js","webpack://james-strategy/./src/settings.js","webpack://james-strategy/./src/views/HomeView.js","webpack://james-strategy/./src/views/View.js","webpack://james-strategy/webpack/bootstrap","webpack://james-strategy/webpack/runtime/define property getters","webpack://james-strategy/webpack/runtime/ensure chunk","webpack://james-strategy/webpack/runtime/hasOwnProperty shorthand","webpack://james-strategy/webpack/runtime/make namespace object","webpack://james-strategy/./src/strategy.js"],"sourcesContent":["var map = {\n\t\"./DevicesView.js\": [\n\t\t\"./src/views/DevicesView.js\",\n\t\t\"main\"\n\t],\n\t\"./HomeView.js\": [\n\t\t\"./src/views/HomeView.js\",\n\t\t\"main\"\n\t],\n\t\"./View.js\": [\n\t\t\"./src/views/View.js\",\n\t\t\"main\"\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(() => {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(() => {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = () => (Object.keys(map));\nwebpackAsyncContext.id = \"./src/views lazy recursive ^\\\\.\\\\/.*\\\\.js$\";\nmodule.exports = webpackAsyncContext;","class TemplateChip {\r\n\tconstructor(content, icon) {\r\n\t\tthis.content = content;\r\n\t\tthis.icon = icon;\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn {\r\n\t\t\t\"type\": \"template\",\r\n\t\t\t\"content\": this.content,\r\n\t\t\t\"icon\": this.icon\r\n\t\t};\r\n\t}\r\n}\r\n\r\nclass EntityChip {\r\n\tconstructor(entity_id, icon) {\r\n\t\tthis.entity_id = entity_id;\r\n\t\tthis.icon = icon;\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn {\r\n\t\t\t\"type\": \"entity\",\r\n\t\t\t\"entity\": this.entity_id,\r\n\t\t\t\"icon\": this.icon\r\n\t\t};\r\n\t}\r\n}\r\n\r\nclass ChipsCard {\r\n\t\r\n\tconstructor(chips) {\r\n\t\tthis.chips = chips;\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn {\r\n\t\t\t\"type\": \"custom:mushroom-chips-card\",\r\n\t\t\t\"chips\": this.chips.map(chip => {\r\n\t\t\t\treturn chip.render();\r\n\t\t\t})\r\n\t\t};\r\n\t}\r\n\t\r\n}\r\n\r\nexport {ChipsCard, EntityChip};","class MarkdownCard {\r\n\t\r\n\tconstructor(content) {\r\n\t\tthis.content = content;\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn {\r\n\t\t\t\"type\": \"markdown\",\r\n\t\t\t\"content\": this.content\r\n\t\t};\r\n\t}\r\n}\r\n\r\nexport {MarkdownCard};","export const settings = {\r\n\tdebug: true,\r\n\tviews: [\r\n\t\t\"HomeView\"\r\n\t],\r\n\tsensors: [\r\n\t\t{\r\n\t\t\t\"name\": \"James Lights On\",\r\n\t\t\t\"icon\": \"mdi:lightbulb-group\",\r\n\t\t\t\"state\": \"{{ states.light | selectattr('state','eq','on') | list | count }}\"\r\n\t\t}\r\n\t]\r\n}","import { MarkdownCard } from \"cards/MarkdownCard.js\";\r\nimport { ChipsCard, EntityChip } from \"cards/ChipsCard.js\";\r\n\r\nclass HomeView {\r\n\r\n\tasync generateView(info) {\r\n\t\tconst { areas, devices, entities } = info.view.strategy.options;\r\n\t\treturn {\r\n\t\t\tstrategy: {\r\n\t\t\t\ttype: \"custom:james\",\r\n\t\t\t\toptions: { areas, devices, entities, name: \"HomeView\" },\r\n\t\t\t},\r\n\t\t\tpath: \"home\"\r\n\t\t}\r\n\t}\r\n\r\n\tasync generateCards() {\r\n\t\treturn [\r\n\t\t\tnew ChipsCard([\r\n\t\t\t\tnew EntityChip(\"sensor.james_lights_on\", \"mdi:lightbulb\")\r\n\t\t\t]).render(),\r\n\t\t\tnew MarkdownCard(`HomeView Generated at ${(new Date).toLocaleString()}`).render()\r\n\t\t];\r\n\t}\r\n\r\n}\r\n\r\nexport {HomeView};","class View {\r\n\r\n\tasync generateView(info) {\r\n\t\tconst { area, devices, entities } = info.view.strategy.options;\r\n\t}\r\n}\r\n\r\nexport {View}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","// The chunk loading function for additional chunks\n// Since all referenced chunks are already included\n// in this file, this function is empty here.\n__webpack_require__.e = () => (Promise.resolve());","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import {settings} from \"settings.js\";\r\n\r\nclass JamesStrategy {\r\n\r\n\tstatic async generateDashboard(info) {\r\n\t\t// Query all data we need. We will make it available to views by storing it in strategy options.\r\n\t\tconst [areas, devices, entities] = await Promise.all([\r\n\t\t\tinfo.hass.callWS({ type: \"config/area_registry/list\" }),\r\n\t\t\tinfo.hass.callWS({ type: \"config/device_registry/list\" }),\r\n\t\t\tinfo.hass.callWS({ type: \"config/entity_registry/list\" }),\r\n\t\t]);\r\n\t\t\r\n\t\tinfo.view = {\r\n\t\t\tstrategy: {\r\n\t\t\t\toptions: {\r\n\t\t\t\t\tareas,\r\n\t\t\t\t\tdevices,\r\n\t\t\t\t\tentities\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tlet views = [];\r\n\r\n\t\tfor (let viewName of settings.views) {\r\n\t\t\tconst viewModule = await import(`views/${viewName}.js`);\r\n\t\t\tlet view = await new viewModule[viewName]().generateView(info);\r\n\t\t\tviews.push(view);\r\n\t\t}\r\n\r\n\t\treturn {\r\n\t\t\ttitle: \"Generated Dashboard\",\r\n\t\t\tviews: views\r\n\t\t};\r\n\t}\r\n\r\n\tstatic async generateView(info) {\r\n\t\tconst viewModule = await import(`views/${info.view.strategy.options.name}.js`);\r\n\t\tlet cards = await new viewModule[info.view.strategy.options.name]().generateCards(info);\r\n\t\treturn {\r\n\t\t\t\"cards\": cards\r\n\t\t}\r\n\t}\r\n\t\r\n}\r\n\r\ncustomElements.define(\"ll-strategy-james\", JamesStrategy);"],"names":[],"sourceRoot":""}