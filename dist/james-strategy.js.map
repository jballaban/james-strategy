{"version":3,"file":"james-strategy.js","mappings":";;;;;;;;;;;;;;;AAAgD;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,SAAS;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA,iBAAiB,2DAAc;AAC/B;AACA;AACA;AACA;AACA;AACA,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,0BAA0B;AACvC,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,oCAAoC;AAC9D,0BAA0B,oCAAoC;AAC9D,0BAA0B,kCAAkC;AAC5D;AACA,MAAM;AACN;AACA;AACA;AACA;AACA,8EAA8E;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,2DAAc;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,mCAAmC,2DAAc;AACjD;AACA,WAAW,2DAAc;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,qCAAqC,2DAAc;AACnD;AACA,WAAW,2DAAc;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,oCAAoC,iBAAiB;AACrD;AACA;AACA;AACA;AACA,aAAa,oBAAoB,OAAO,QAAQ,iCAAiC,SAAS,KAAK,MAAM,oBAAoB;AACzH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,YAAY;AACzB,YAAY;AACZ;AACA,cAAc,SAAS;AACvB;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA,0CAA0C,YAAY;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,YAAY;AACzB,aAAa,QAAQ;AACrB;AACA,cAAc,cAAc;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,YAAY;AACzB,aAAa,QAAQ;AACrB;AACA,cAAc,eAAe;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,YAAY;AAClE,eAAe,4BAA4B;AAC3C;AACA,eAAe,8BAA8B;AAC7C;AACA;AACA;AACA;AACA,+CAA+C,OAAO;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,gBAAgB;AAC7B,aAAa,eAAe;AAC5B,aAAa,GAAG;AAChB;AACA,cAAc,mBAAmB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,UAAU;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,UAAU;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACgB;;;;;;;;;;;;;;;;;AC9biB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,aAAa,yBAAyB;AACtC,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,2CAAM;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,QAAQ,kBAAkB;AACvC,aAAa,QAAQ,iBAAiB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA,cAAc,0BAA0B;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACsB;;;;;;;;;;;;;;;;;AChFsB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,uDAAY;AACnC;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,aAAa,YAAY;AACzB,aAAa,iBAAiB,WAAW;AACzC,cAAc,OAAO;AACrB;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACkB;;;;;;;;;;;;;;;;ACvDlB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,UAAU;AACtB;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,cAAc;AAC3B,aAAa,kBAAkB;AAC/B;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;AACA,eAAe,UAAU;AACzB;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf,sBAAsB;AACtB,aAAa;AACb,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf,sBAAsB;AACtB,aAAa;AACb,WAAW;AACX;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACmB;;;;;;;;;;;ACpGnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;;;;;;;;;;;;;;;ACxCO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;;;;;;;;;;;;;;;;AC/BiC;AACY;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,2CAAM;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,QAAQ,kBAAkB;AACvC,aAAa,QAAQ,iBAAiB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,oBAAoB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,2CAAM;AAC7B;AACA,yBAAyB,2CAAM;AAC/B,yBAAyB,2CAAM;AAC/B,+BAA+B,6DAAO,GAAU,EAAE,UAAU,CAAC,CAAC;AAC9D;AACA;AACA;AACA,0BAA0B,2CAAM;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,uDAAS;AACvC;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,eAAe,kBAAkB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACsB;;;;;;;;;;;;;;;;;;ACjIW;AACW;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,uDAAY;AACnC;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,aAAa,WAAW;AACrC;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,SAAS;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,2CAAM;AAClC;AACA;AACA;AACA,qBAAqB,4BAA4B,qBAAqB,gBAAgB,MAAM,GAAG,uBAAuB,kBAAkB,MAAM,GAAG,sBAAsB,gBAAgB,MAAM,GAAG,UAAU,SAAS,MAAM,GAAG,UAAU;AACtO;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA,WAAW;AACX;AACA;AACA,WAAW;AACX,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,WAAW;AACX;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,UAAU;AACxB;AACA;AACA;AACA;AACA,IAAI,wIAA2B;AAC/B;AACA;AACA,yBAAyB,2CAAM;AAC/B,aAAa,2CAAM;AACnB;AACA,4CAA4C,2CAAM;AAClD;AACA;AACA;AACA;AACA,sBAAsB,sBAAsB;AAC5C;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACkB;;;;;;;;;;;ACjHlB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;;;;;;UClCA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;WACA;WACA;WACA;;;;;WCHA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;ACNgC;AAChC;AACA;AACA;AACA;AACA,UAAU,2CAAM;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,2CAAM;AAC7B;AACA,yBAAyB,2CAAM;AAC/B,+BAA+B,6DAAO,GAAS,EAAE,SAAS,CAAC,CAAC;AAC5D;AACA;AACA,wDAAwD,2CAAM;AAC9D;AACA;AACA;AACA,QAAQ;AACR,sBAAsB,2CAAM,sBAAsB,OAAO;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mE","sources":["webpack://james-strategy/./src/Helper.js","webpack://james-strategy/./src/cards/AbstractCard.js","webpack://james-strategy/./src/cards/AreaCard.js","webpack://james-strategy/./src/cards/TitleCard.js","webpack://james-strategy/./src/cards/ lazy ^\\.\\/.*$ namespace object","webpack://james-strategy/./src/optionDefaults.js","webpack://james-strategy/./src/views/AbstractView.js","webpack://james-strategy/./src/views/HomeView.js","webpack://james-strategy/./src/views/ lazy ^\\.\\/.*$ namespace object","webpack://james-strategy/webpack/bootstrap","webpack://james-strategy/webpack/runtime/define property getters","webpack://james-strategy/webpack/runtime/ensure chunk","webpack://james-strategy/webpack/runtime/hasOwnProperty shorthand","webpack://james-strategy/webpack/runtime/make namespace object","webpack://james-strategy/./src/james-strategy.js"],"sourcesContent":["import {optionDefaults} from \"./optionDefaults\";\r\n\r\n/**\r\n * Helper Class\r\n *\r\n * Contains the objects of Home Assistant's registries and helper methods.\r\n */\r\nclass Helper {\r\n  /**\r\n   * An array of entities from Home Assistant's entity registry.\r\n   *\r\n   * @type {hassEntity[]}\r\n   * @private\r\n   */\r\n  static #entities;\r\n  /**\r\n   * An array of entities from Home Assistant's device registry.\r\n   *\r\n   * @type {deviceEntity[]}\r\n   * @private\r\n   */\r\n  static #devices;\r\n  /**\r\n   * An array of entities from Home Assistant's area registry.\r\n   *\r\n   * @type {areaEntity[]}\r\n   * @private\r\n   */\r\n  static #areas = [];\r\n  /**\r\n   * An array of state entities from Home Assistant's Hass object.\r\n   *\r\n   * @type {hassObject[\"states\"]}\r\n   * @private\r\n   */\r\n  static #hassStates;\r\n\r\n  /**\r\n   * Indicates whether this module is initialized.\r\n   *\r\n   * @type {boolean} True if initialized.\r\n   * @private\r\n   */\r\n  static #initialized = false;\r\n\r\n  /**\r\n   * The Custom strategy configuration.\r\n   *\r\n   * @type {customStrategyOptions | {}}\r\n   * @private\r\n   */\r\n  static #strategyOptions = {};\r\n\r\n  /**\r\n   * Set to true for more verbose information in the console.\r\n   *\r\n   * @type {boolean}\r\n   */\r\n  static debug = optionDefaults.debug;\r\n\r\n  /**\r\n   * Class constructor.\r\n   *\r\n   * This class shouldn't be instantiated directly. Instead, it should be initialized with method initialize().\r\n   * @throws {Error} If trying to instantiate this class.\r\n   */\r\n  constructor() {\r\n    throw new Error(\"This class should be invoked with method initialize() instead of using the keyword new!\");\r\n  }\r\n\r\n  /**\r\n   * Custom strategy configuration.\r\n   *\r\n   * @returns {customStrategyOptions|{}}\r\n   * @static\r\n   */\r\n  static get strategyOptions() {\r\n    return this.#strategyOptions;\r\n  }\r\n\r\n  /**\r\n   * @returns {areaEntity[]}\r\n   * @static\r\n   */\r\n  static get areas() {\r\n    return this.#areas;\r\n  }\r\n\r\n  /**\r\n   * @returns {deviceEntity[]}\r\n   * @static\r\n   */\r\n  static get devices() {\r\n    return this.#devices;\r\n  }\r\n\r\n  /**\r\n   * @returns {hassEntity[]}\r\n   * @static\r\n   */\r\n  static get entities() {\r\n    return this.#entities;\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean}\r\n   * @static\r\n   */\r\n  static get debug() {\r\n    return this.debug;\r\n  }\r\n\r\n  /**\r\n   * Initialize this module.\r\n   *\r\n   * @param {dashBoardInfo | viewInfo} info Strategy information object.\r\n   * @returns {Promise<void>}\r\n   * @static\r\n   */\r\n  static async initialize(info) {\r\n    this.#hassStates = info.hass.states;\r\n\r\n    try {\r\n      // Query the registries of Home Assistant.\r\n      [this.#entities, this.#devices, this.#areas] = await Promise.all([\r\n        info.hass.callWS({type: \"config/entity_registry/list\"}),\r\n        info.hass.callWS({type: \"config/device_registry/list\"}),\r\n        info.hass.callWS({type: \"config/area_registry/list\"}),\r\n      ]);\r\n    } catch (e) {\r\n      console.error(Helper.debug ? e : \"An error occurred while querying Home assistant's registries!\");\r\n    }\r\n\r\n    // Cloning is required for the purpose of the required undisclosed area.\r\n    this.#strategyOptions = structuredClone(info.config.strategy.options || {});\r\n    this.debug            = this.#strategyOptions.debug;\r\n\r\n    // Setup required configuration entries.\r\n    // TODO: Refactor to something smarter than repeating code for areas, views and domains.\r\n    this.#strategyOptions.areas   = this.#strategyOptions.areas ?? {};\r\n    this.#strategyOptions.views   = this.#strategyOptions.views ?? {};\r\n    this.#strategyOptions.domains = this.#strategyOptions.domains ?? {};\r\n\r\n    // Setup and add the undisclosed area if not hidden in the strategy options.\r\n    if (!this.#strategyOptions.areas.undisclosed?.hidden) {\r\n      this.#strategyOptions.areas.undisclosed = {\r\n        ...optionDefaults.areas.undisclosed,\r\n        ...this.#strategyOptions.areas.undisclosed,\r\n      };\r\n\r\n      // Make sure the area_id of the custom undisclosed area remains null.\r\n      this.#strategyOptions.areas.undisclosed.area_id = null;\r\n\r\n      this.#areas.push(this.#strategyOptions.areas.undisclosed);\r\n    }\r\n\r\n    // Merge custom areas of the strategy options into hass areas.\r\n    this.#areas = Helper.areas.map(area => {\r\n      return {...area, ...this.#strategyOptions.areas[area.area_id ?? \"undisclosed\"]};\r\n    });\r\n\r\n    // Sort hass areas by order first and then by name.\r\n    this.#areas.sort((a, b) => {\r\n      return (a.order ?? Infinity) - (b.order ?? Infinity) || a.name.localeCompare(b.name);\r\n    });\r\n\r\n    // Merge the views of the strategy options and the default views.\r\n    for (const view of Object.keys(optionDefaults.views)) {\r\n      this.#strategyOptions.views[view] = {\r\n        ...optionDefaults.views[view],\r\n        ...(this.#strategyOptions.views[view]),\r\n      };\r\n    }\r\n\r\n    // Sort views of the strategy options by order first and then by title.\r\n    this.#strategyOptions.views = Object.fromEntries(\r\n        Object.entries(this.#strategyOptions.views).sort(([, a], [, b]) => {\r\n          return (a.order ?? Infinity) - (b.order ?? Infinity) || a.title?.localeCompare(b.title);\r\n        }),\r\n    );\r\n\r\n    // Merge the domains of the strategy options and the default domains.\r\n    for (const domain of Object.keys(optionDefaults.domains)) {\r\n      this.#strategyOptions.domains[domain] = {\r\n        ...optionDefaults.domains[domain],\r\n        ...(this.#strategyOptions.domains[domain]),\r\n      };\r\n    }\r\n\r\n    // Sort domains of the strategy options by order first and then by title.\r\n    this.#strategyOptions.domains = Object.fromEntries(\r\n        Object.entries(this.#strategyOptions.domains).sort(([, a], [, b]) => {\r\n          return (a.order ?? Infinity) - (b.order ?? Infinity) || a.title?.localeCompare(b.title);\r\n        }),\r\n    );\r\n\r\n    this.#initialized = true;\r\n  }\r\n\r\n  /**\r\n   * Get the initialization status of the Helper class.\r\n   *\r\n   * @returns {boolean} True if this module is initialized.\r\n   * @static\r\n   */\r\n  static isInitialized() {\r\n    return this.#initialized;\r\n  }\r\n\r\n  /**\r\n   * Get a template string to define the number of a given domain's entities with a certain state.\r\n   *\r\n   * States are compared against a given value by a given operator.\r\n   *\r\n   * @param {string} domain The domain of the entities.\r\n   * @param {string} operator The Comparison operator between state and value.\r\n   * @param {string} value The value to which the state is compared against.\r\n   *\r\n   * @return {string} The template string.\r\n   * @static\r\n   */\r\n  static getCountTemplate(domain, operator, value) {\r\n    // noinspection JSMismatchedCollectionQueryUpdate (False positive per 17-04-2023)\r\n    /**\r\n     * Array of entity state-entries, filtered by domain.\r\n     *\r\n     * Each element contains a template-string which is used to access home assistant's state machine (state object) in\r\n     * a template.\r\n     * E.g. \"states['light.kitchen']\"\r\n     *\r\n     * The array excludes hidden and disabled entities.\r\n     *\r\n     * @type {string[]}\r\n     */\r\n    const states = [];\r\n\r\n    if (!this.isInitialized()) {\r\n      console.warn(\"Helper class should be initialized before calling this method!\");\r\n    }\r\n\r\n    // Get the ID of the devices which are linked to the given area.\r\n    for (const area of this.#areas) {\r\n      const areaDeviceIds = this.#devices.filter(device => {\r\n        return device.area_id === area.area_id;\r\n      }).map(device => {\r\n        return device.id;\r\n      });\r\n\r\n      // Get the entities of which all conditions of the callback function are met. @see areaFilterCallback.\r\n      const newStates = this.#entities.filter(\r\n          this.#areaFilterCallback, {\r\n            area: area,\r\n            domain: domain,\r\n            areaDeviceIds: areaDeviceIds,\r\n          })\r\n          .map(entity => `states['${entity.entity_id}']`);\r\n\r\n      states.push(...newStates);\r\n    }\r\n\r\n    return `{% set entities = [${states}] %} {{ entities | selectattr('state','${operator}','${value}') | list | count }}`;\r\n  }\r\n\r\n  /**\r\n   * Callback function for filtering entities.\r\n   *\r\n   * Entities of which all the conditions below are met are kept:\r\n   * 1. Or/Neither the entity's linked device (if any) or/nor the entity itself is lined to the given area.\r\n   *    (See variable areaMatch)\r\n   * 2. The entity's domain matches the given domain.\r\n   * 3. The entity is not hidden and is not disabled.\r\n   *\r\n   * @param {hassEntity} entity The current hass entity to evaluate.\r\n   * @this {areaFilterContext}\r\n   *\r\n   * @return {boolean} True to keep the entity.\r\n   * @static\r\n   */\r\n  static #areaFilterCallback(entity) {\r\n    const areaMatch = this.area.area_id\r\n        // Area is a hass entity; The entity's linked device or the entity itself is linked to the given area.\r\n        ? this.areaDeviceIds.includes(entity.device_id) || entity.area_id === this.area.area_id\r\n        // Undisclosed area; Neither the entity's linked device (if any), nor the entity itself is linked to any area.\r\n        : (this.areaDeviceIds.includes(entity.device_id) || !entity.device_id) && !entity.area_id;\r\n\r\n    return (\r\n        areaMatch\r\n        && entity.entity_id.startsWith(`${this.domain}.`)\r\n        && entity.hidden_by == null && entity.disabled_by == null\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get device entities from the entity registry, filtered by area and domain.\r\n   *\r\n   * The entity registry is a registry where Home-Assistant keeps track of all entities.\r\n   * A device is represented in Home Assistant via one or more entities.\r\n   *\r\n   * The result excludes hidden and disabled entities.\r\n   *\r\n   * @param {areaEntity} area Area entity.\r\n   * @param {string} domain The domain of the entity-id.\r\n   *\r\n   * @return {hassEntity[]} Array of device entities.\r\n   * @static\r\n   */\r\n  static getDeviceEntities(area, domain) {\r\n    if (!this.isInitialized()) {\r\n      console.warn(\"Helper class should be initialized before calling this method!\");\r\n    }\r\n\r\n    // Get the ID of the devices which are linked to the given area.\r\n    const areaDeviceIds = this.#devices.filter(device => {\r\n      return device.area_id === area.area_id;\r\n    }).map(device => {\r\n\r\n      return device.id;\r\n    });\r\n\r\n    // Return the entities of which all conditions of the callback function are met. @see areaFilterCallback.\r\n    return this.#entities.filter(\r\n        this.#areaFilterCallback, {\r\n          area: area,\r\n          domain: domain,\r\n          areaDeviceIds: areaDeviceIds,\r\n        })\r\n        .sort((a, b) => {\r\n          /** @type hassEntity */\r\n          return a.original_name?.localeCompare(b.original_name);\r\n        });\r\n  }\r\n\r\n  /**\r\n   * Get state entities, filtered by area and domain.\r\n   *\r\n   * The result excludes hidden and disabled entities.\r\n   *\r\n   * @param {areaEntity} area Area entity.\r\n   * @param {string} domain Domain of the entity-id.\r\n   *\r\n   * @return {stateObject[]} Array of state entities.\r\n   */\r\n  static getStateEntities(area, domain) {\r\n    if (!this.isInitialized()) {\r\n      console.warn(\"Helper class should be initialized before calling this method!\");\r\n    }\r\n\r\n    const states = [];\r\n\r\n    // Create a map for the hassEntities and devices {id: object} to improve lookup speed.\r\n    /** @type {Object<string, hassEntity>} */\r\n    const entityMap = Object.fromEntries(this.#entities.map(entity => [entity.entity_id, entity]));\r\n    /** @type {Object<string, deviceEntity>} */\r\n    const deviceMap = Object.fromEntries(this.#devices.map(device => [device.id, device]));\r\n\r\n    // Get states whose entity-id starts with the given string.\r\n    const stateEntities = Object.values(this.#hassStates).filter(\r\n        state => state.entity_id.startsWith(`${domain}.`),\r\n    );\r\n\r\n    for (const state of stateEntities) {\r\n      const hassEntity = entityMap[state.entity_id];\r\n      const device     = deviceMap[hassEntity?.device_id];\r\n\r\n      // Collect states of which any (whichever comes first) of the conditions below are met:\r\n      // 1. The linked entity is linked to the given area.\r\n      // 2. The entity is linked to a device, and the linked device is linked to the given area.\r\n      if (\r\n          (hassEntity?.area_id === area.area_id)\r\n          || (device && device.area_id === area.area_id)\r\n      ) {\r\n        states.push(state);\r\n      }\r\n    }\r\n\r\n    return states;\r\n  }\r\n\r\n  /**\r\n   * Sanitize a classname.\r\n   *\r\n   * The name is sanitized by capitalizing the first character of the name or after an underscore.\r\n   * Underscores are removed.\r\n   *\r\n   * @param {string} className Name of the class to sanitize.\r\n   * @returns {string} The sanitized classname.\r\n   */\r\n  static sanitizeClassName(className) {\r\n    className = className.charAt(0).toUpperCase() + className.slice(1);\r\n\r\n    return className.replace(/([-_][a-z])/g, group =>\r\n        group\r\n            .toUpperCase()\r\n            .replace(\"-\", \"\")\r\n            .replace(\"_\", \"\"),\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get the keys of nested objects by its property value.\r\n   *\r\n   * @param {Object<Object>} object An object of objects.\r\n   * @param {string|number} property The name of the property to evaluate.\r\n   * @param {*} value The value which the property should match.\r\n   *\r\n   * @return {string[]|number[]} An array with keys.\r\n   */\r\n  static #getObjectKeysByPropertyValue(object, property, value) {\r\n    const keys = [];\r\n\r\n    for (const key of Object.keys(object)) {\r\n      if (object[key][property] === value) {\r\n        keys.push(key);\r\n      }\r\n    }\r\n\r\n    return keys;\r\n  }\r\n\r\n  /**\r\n   * Get the ids of the views which aren't set to hidden in the strategy options.\r\n   *\r\n   * @return {string[]} An array of view ids.\r\n   */\r\n  static getExposedViewIds() {\r\n    if (!this.isInitialized()) {\r\n      console.warn(\"Helper class should be initialized before calling this method!\");\r\n    }\r\n\r\n    return this.#getObjectKeysByPropertyValue(this.#strategyOptions.views, \"hidden\", false);\r\n  }\r\n\r\n  /**\r\n   * Get the ids of the domain ids which aren't set to hidden in the strategy options.\r\n   *\r\n   * @return {string[]} An array of domain ids.\r\n   */\r\n  static getExposedDomainIds() {\r\n    if (!this.isInitialized()) {\r\n      console.warn(\"Helper class should be initialized before calling this method!\");\r\n    }\r\n\r\n    return this.#getObjectKeysByPropertyValue(this.#strategyOptions.domains, \"hidden\", false);\r\n  }\r\n}\r\n\r\nexport {Helper};\r\n","import {Helper} from \"../Helper\";\r\n\r\n/**\r\n * Abstract Card Class\r\n *\r\n * To create a new card, extend the new class with this one.\r\n *\r\n * @class\r\n * @abstract\r\n */\r\nclass AbstractCard {\r\n  /**\r\n   * Entity to create the card for.\r\n   *\r\n   * @type {hassEntity | areaEntity}\r\n   */\r\n  entity;\r\n\r\n  /**\r\n   * Options for creating a card.\r\n   *\r\n   * @type {abstractOptions}\r\n   */\r\n  options = {\r\n    type: \"custom:mushroom-entity-card\",\r\n    icon: \"mdi:help-circle\",\r\n    double_tap_action: {\r\n      action: null,\r\n    },\r\n  };\r\n\r\n  /**\r\n   * Class constructor.\r\n   *\r\n   * @param {hassEntity | areaEntity} entity The hass entity to create a card for.\r\n   * @throws {Error} If the Helper module isn't initialized.\r\n   */\r\n  constructor(entity) {\r\n    if (this.constructor === AbstractCard) {\r\n      throw new Error(\"Abstract classes can't be instantiated.\");\r\n    }\r\n\r\n    if (!Helper.isInitialized()) {\r\n      throw new Error(\"The Helper module must be initialized before using this one.\");\r\n    }\r\n\r\n    this.entity = entity;\r\n  }\r\n\r\n  /**\r\n   * Merge the default options of this class and the custom options into the options of the parent class.\r\n   *\r\n   * @param {Object} [defaultOptions={}] Default options for the card.\r\n   * @param {Object} [customOptions={}] Custom Options for the card.\r\n   */\r\n  mergeOptions(defaultOptions, customOptions) {\r\n    this.options = {\r\n      ...this.options,\r\n      ...defaultOptions,\r\n      ...customOptions,\r\n    };\r\n\r\n    try {\r\n      this.options.double_tap_action.target.entity_id = this.entity.entity_id;\r\n    } catch { }\r\n  }\r\n\r\n  /**\r\n   * Get a card for an entity.\r\n   *\r\n   * @return {abstractOptions & Object} A card object.\r\n   */\r\n  getCard() {\r\n    return {\r\n      entity: this.entity.entity_id,\r\n      ...this.options,\r\n    };\r\n  }\r\n}\r\n\r\nexport {AbstractCard};\r\n","import {AbstractCard} from \"./AbstractCard\";\r\n\r\n/**\r\n * Area Card Class\r\n *\r\n * Used to create a card for an entity of the area domain.\r\n *\r\n * @class\r\n * @extends AbstractCard\r\n */\r\nclass AreaCard extends AbstractCard {\r\n  /**\r\n   * Default options of the card.\r\n   *\r\n   * @type {areaCardOptions}\r\n   * @private\r\n   */\r\n  #defaultOptions = {\r\n    type: \"custom:mushroom-template-card\",\r\n    primary: undefined,\r\n    icon: \"mdi:texture-box\",\r\n    icon_color: \"blue\",\r\n    tap_action: {\r\n      action: \"navigate\",\r\n      navigation_path: undefined,\r\n    },\r\n    hold_action: {\r\n      action: \"none\",\r\n    },\r\n  };\r\n\r\n  /**\r\n   * Class constructor.\r\n   *\r\n   * @param {areaEntity} area The area entity to create a card for.\r\n   * @param {areaCardOptions} [options={}] Options for the card.\r\n   * @throws {Error} If the Helper module isn't initialized.\r\n   */\r\n  constructor(area, options = {}) {\r\n    super(area);\r\n    this.#defaultOptions.primary                    = area.name;\r\n    this.#defaultOptions.tap_action.navigation_path = area.area_id ?? area.name;\r\n\r\n    this.mergeOptions(\r\n        this.#defaultOptions,\r\n        options,\r\n    );\r\n\r\n    // Override the area's name with a custom name, unless a custom primary text is set.\r\n    if (!options.primary && options.name) {\r\n      this.options.primary = options.name;\r\n    }\r\n  }\r\n}\r\n\r\nexport {AreaCard};\r\n","/**\r\n * Title Card class.\r\n *\r\n * Used for creating a Title Card.\r\n *\r\n * @class\r\n */\r\nclass TitleCard {\r\n  /**\r\n   * @type {string[]} An array of area ids.\r\n   * @private\r\n   */\r\n  #areaIds;\r\n\r\n  /**\r\n   * @type {titleCardOptions}\r\n   * @private\r\n   */\r\n  #options = {\r\n    title: undefined,\r\n    subtitle: undefined,\r\n    showControls: true,\r\n    iconOn: \"mdi:power-on\",\r\n    iconOff: \"mdi:power-off\",\r\n    onService: \"none\",\r\n    offService: \"none\",\r\n  };\r\n\r\n  /**\r\n   * Class constructor.\r\n   *\r\n   * @param {areaEntity[]} areas An array of area entities.\r\n   * @param {titleCardOptions} options Title Card options.\r\n   */\r\n  constructor(areas, options = {}) {\r\n    this.#areaIds = areas.map(area => area.area_id).filter(area_id => area_id);\r\n    this.#options = {\r\n      ...this.#options,\r\n      ...options,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Create a Title card.\r\n   *\r\n   * @return {Object} A Title card.\r\n   */\r\n  createCard() {\r\n    /** @type {Object[]} */\r\n    const cards = [\r\n      {\r\n        type: \"custom:mushroom-title-card\",\r\n        title: this.#options.title,\r\n        subtitle: this.#options.subtitle,\r\n      },\r\n    ];\r\n\r\n    if (this.#options.showControls) {\r\n      cards.push({\r\n        type: \"horizontal-stack\",\r\n        cards: [\r\n          {\r\n            type: \"custom:mushroom-template-card\",\r\n            icon: this.#options.iconOff,\r\n            layout: \"vertical\",\r\n            icon_color: \"red\",\r\n            tap_action: {\r\n              action: \"call-service\",\r\n              service: this.#options.offService,\r\n              target: {\r\n                area_id: this.#areaIds,\r\n              },\r\n              data: {},\r\n            },\r\n          },\r\n          {\r\n            type: \"custom:mushroom-template-card\",\r\n            icon: this.#options.iconOn,\r\n            layout: \"vertical\",\r\n            icon_color: \"amber\",\r\n            tap_action: {\r\n              action: \"call-service\",\r\n              service: this.#options.onService,\r\n              target: {\r\n                area_id: this.#areaIds,\r\n              },\r\n              data: {},\r\n            },\r\n          },\r\n        ],\r\n      });\r\n    }\r\n\r\n    return {\r\n      type: \"horizontal-stack\",\r\n      cards: cards,\r\n    };\r\n  }\r\n}\r\n\r\nexport {TitleCard};\r\n","var map = {\n\t\"./AbstractCard\": [\n\t\t\"./src/cards/AbstractCard.js\",\n\t\t\"main\"\n\t],\n\t\"./AbstractCard.js\": [\n\t\t\"./src/cards/AbstractCard.js\",\n\t\t\"main\"\n\t],\n\t\"./AreaCard\": [\n\t\t\"./src/cards/AreaCard.js\",\n\t\t\"main\"\n\t],\n\t\"./AreaCard.js\": [\n\t\t\"./src/cards/AreaCard.js\",\n\t\t\"main\"\n\t],\n\t\"./TitleCard\": [\n\t\t\"./src/cards/TitleCard.js\"\n\t],\n\t\"./TitleCard.js\": [\n\t\t\"./src/cards/TitleCard.js\"\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(() => {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn Promise.all(ids.slice(1).map(__webpack_require__.e)).then(() => {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = () => (Object.keys(map));\nwebpackAsyncContext.id = \"./src/cards lazy recursive ^\\\\.\\\\/.*$\";\nmodule.exports = webpackAsyncContext;","export const optionDefaults = {\r\n  debug: true,\r\n  views: {\r\n    home: {\r\n      order: 1,\r\n      hidden: false,\r\n    }\r\n  }, areas: {\r\n    undisclosed: {\r\n      aliases: [],\r\n      area_id: null,\r\n      name: \"Undisclosed\",\r\n      picture: null,\r\n      hidden: false,\r\n    }\r\n  }, domains: {\r\n    default: {\r\n      title: \"Miscellaneous\",\r\n      showControls: false,\r\n      hidden: false,\r\n    },\r\n    light: {\r\n      title: \"Lights\",\r\n      showControls: true,\r\n      iconOn: \"mdi:lightbulb\",\r\n      iconOff: \"mdi:lightbulb-off\",\r\n      onService: \"light.turn_on\",\r\n      offService: \"light.turn_off\",\r\n      hidden: false,\r\n    },\r\n  }\r\n}","import {Helper} from \"../Helper\";\r\nimport {TitleCard} from \"../cards/TitleCard\";\r\n\r\n/**\r\n * Abstract View Class.\r\n *\r\n * To create a new view, extend the new class with this one.\r\n *\r\n * @class\r\n * @abstract\r\n */\r\nclass AbstractView {\r\n  /**\r\n   * Options for creating a view.\r\n   *\r\n   * @type {abstractOptions}\r\n   */\r\n  options = {\r\n    title: null,\r\n    path: null,\r\n    icon: \"mdi:view-dashboard\",\r\n    subview: false,\r\n  };\r\n\r\n  /**\r\n   * A card to switch all entities in the view.\r\n   *\r\n   * @type {Object}\r\n   */\r\n  viewTitleCard;\r\n\r\n  /**\r\n   * Class constructor.\r\n   *\r\n   * @throws {Error} If trying to instantiate this class.\r\n   * @throws {Error} If the Helper module isn't initialized.\r\n   */\r\n  constructor() {\r\n    if (this.constructor === AbstractView) {\r\n      throw new Error(\"Abstract classes can't be instantiated.\");\r\n    }\r\n\r\n    if (!Helper.isInitialized()) {\r\n      throw new Error(\"The Helper module must be initialized before using this one.\");\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Merge the default options of this class and the custom options into the options of the parent class.\r\n   *\r\n   * @param {Object} [defaultOptions={}] Default options for the card.\r\n   * @param {Object} [customOptions={}] Custom Options for the card.\r\n   */\r\n  mergeOptions(defaultOptions, customOptions) {\r\n    this.options = {\r\n      ...defaultOptions,\r\n      ...customOptions,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Create the cards to include in the view.\r\n   *\r\n   * @return {Object[] | Promise} An array of card objects.\r\n   */\r\n  async createViewCards() {\r\n    /** @type Object[] */\r\n    const viewCards      = [this.viewTitleCard];\r\n\r\n    // Create cards for each area.\r\n    for (const area of Helper.areas) {\r\n      const areaCards  = [];\r\n      const entities   = Helper.getDeviceEntities(area, this[\"domain\"]);\r\n      const className  = Helper.sanitizeClassName(this[\"domain\"] + \"Card\");\r\n      const cardModule = await import(`../cards/${className}`);\r\n\r\n      // Create a card for each domain-entity of the current area.\r\n      for (const entity of entities) {\r\n        let cardOptions = Helper.strategyOptions.card_options?.[entity.entity_id] ?? {};\r\n\r\n        if (cardOptions.hidden) {\r\n          continue;\r\n        }\r\n\r\n        areaCards.push(new cardModule[className](entity, cardOptions).getCard());\r\n      }\r\n\r\n      if (areaCards.length) {\r\n        // Create a Title card for the current area if it has entities.\r\n        areaCards.unshift(new TitleCard(\r\n            [area],\r\n            {\r\n              title: area.name,\r\n              ...this.options[\"titleCard\"],\r\n            },\r\n            this[\"domain\"],\r\n        ).createCard());\r\n\r\n        viewCards.push({\r\n          type: \"vertical-stack\",\r\n          cards: areaCards,\r\n        });\r\n      }\r\n    }\r\n\r\n    viewCards.unshift(viewCards.length ? this.viewTitleCard : {\r\n      type: \"custom:mushroom-title-card\",\r\n      title: \"No Entities Available\",\r\n      subtitle: \"They're either hidden by the configuration or by Home Assistant.\",\r\n    });\r\n\r\n    return viewCards;\r\n  }\r\n\r\n  /**\r\n   * Get a view object.\r\n   *\r\n   * The view includes the cards which are created by method createViewCards().\r\n   *\r\n   * @returns {viewOptions & {cards: Object[]}} The view object.\r\n   */\r\n  async getView() {\r\n    return {\r\n      ...this.options,\r\n      cards: await this.createViewCards(),\r\n    };\r\n  }\r\n}\r\n\r\nexport {AbstractView};\r\n","import {Helper} from \"../Helper\";\r\nimport {AbstractView} from \"./AbstractView\";\r\n\r\n/**\r\n * Home View Class.\r\n *\r\n * Used to create a Home view.\r\n *\r\n * @class HomeView\r\n * @extends AbstractView\r\n */\r\nclass HomeView extends AbstractView {\r\n  /**\r\n   * Default options for the view.\r\n   * \r\n   * @type {viewOptions}\r\n   * @private\r\n   */\r\n  #defaultOptions = {\r\n    title: \"Home\",\r\n    path: \"home\",\r\n    subview: false,\r\n  };\r\n\r\n  /**\r\n   * Class constructor.\r\n   *\r\n   * @param {viewOptions} [options={}] Options for the view.\r\n   */\r\n  constructor(options = {}) {\r\n    super();\r\n    this.mergeOptions(\r\n        this.#defaultOptions,\r\n        options,\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Create the cards to include in the view.\r\n   *\r\n   * @return {Promise} A promise of a card object array.\r\n   * @override\r\n   */\r\n  async createViewCards() {\r\n    return await Promise.all([\r\n      this.#createAreaCards(),\r\n    ]).then(([areaCards]) => {\r\n      const options       = Helper.strategyOptions;\r\n      const homeViewCards = [\r\n        {\r\n          type: \"custom:mushroom-template-card\",\r\n          primary: \"{% set time = now().hour %} {% if (time >= 18) %} Good Evening, {{user}}! {% elif (time >= 12) %} Good Afternoon, {{user}}! {% elif (time >= 5) %} Good Morning, {{user}}! {% else %} Hello, {{user}}! {% endif %}\",\r\n          icon: \"mdi:hand-wave\",\r\n          icon_color: \"orange\",\r\n          tap_action: {\r\n            action: \"none\",\r\n          },\r\n          double_tap_action: {\r\n            action: \"none\",\r\n          },\r\n          hold_action: {\r\n            action: \"none\",\r\n          },\r\n        },\r\n      ];\r\n\r\n      // Add area cards.\r\n      homeViewCards.push({\r\n            type: \"custom:mushroom-title-card\",\r\n            title: \"Areas\",\r\n          },\r\n          {\r\n            type: \"vertical-stack\",\r\n            cards: areaCards,\r\n          });\r\n\r\n      return homeViewCards;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Create the area cards to include in the view.\r\n   *\r\n   * Area cards are grouped into two areas per row.\r\n   *\r\n   * @return {Object[]} A card object array.\r\n   */\r\n  #createAreaCards() {\r\n    const groupedCards = [];\r\n\r\n    import(\"../cards/AreaCard\").then(areaModule => {\r\n      const areaCards = [];\r\n\r\n      for (const area of Helper.areas) {\r\n        if (!Helper.strategyOptions.areas[area.area_id]?.hidden) {\r\n          areaCards.push(\r\n              new areaModule.AreaCard(area, Helper.strategyOptions.areas[area.area_id ?? \"undisclosed\"]).getCard());\r\n        }\r\n      }\r\n\r\n      // Horizontally group every two area cards.\r\n      for (let i = 0; i < areaCards.length; i += 2) {\r\n        groupedCards.push({\r\n          type: \"horizontal-stack\",\r\n          cards: areaCards.slice(i, i + 2),\r\n        });\r\n      }\r\n    });\r\n\r\n    return groupedCards;\r\n  }\r\n}\r\n\r\nexport {HomeView};\r\n","var map = {\n\t\"./AbstractView\": [\n\t\t\"./src/views/AbstractView.js\",\n\t\t\"main\"\n\t],\n\t\"./AbstractView.js\": [\n\t\t\"./src/views/AbstractView.js\",\n\t\t\"main\"\n\t],\n\t\"./HomeView\": [\n\t\t\"./src/views/HomeView.js\",\n\t\t\"main\"\n\t],\n\t\"./HomeView.js\": [\n\t\t\"./src/views/HomeView.js\",\n\t\t\"main\"\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(() => {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(() => {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = () => (Object.keys(map));\nwebpackAsyncContext.id = \"./src/views lazy recursive ^\\\\.\\\\/.*$\";\nmodule.exports = webpackAsyncContext;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","// The chunk loading function for additional chunks\n// Since all referenced chunks are already included\n// in this file, this function is empty here.\n__webpack_require__.e = () => (Promise.resolve());","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import {Helper} from \"./Helper\";\r\n\r\nclass JamesStrategy {\r\n\r\n  static async generateDashboard(info) {\r\n    await Helper.initialize(info);\r\n    \r\n    // Create views.\r\n    const views = [];\r\n\r\n    let viewModule;\r\n\r\n    for (let viewId of Helper.getExposedViewIds()) {\r\n      try {\r\n        const viewType = Helper.sanitizeClassName(viewId + \"View\");\r\n        viewModule     = await import(`./views/${viewType}`);\r\n        console.log(viewModule);\r\n        console.log(viewId);\r\n        const view     = await new viewModule[viewType](Helper.strategyOptions.views[viewId]).getView();\r\n\r\n        views.push(view);\r\n\r\n      } catch (e) {\r\n        console.error(Helper.debug ? e : `View '${viewId}' couldn't be loaded!`);\r\n      }\r\n    }\r\n\r\n    return {\r\n      views: views,\r\n    };\r\n  }\r\n}\r\n\r\ncustomElements.define(\"ll-strategy-james-strategy\", JamesStrategy);"],"names":[],"sourceRoot":""}